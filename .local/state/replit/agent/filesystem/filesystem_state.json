{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack healthcare demo application called \"NextViseAI — Healthcare Demos\" that showcases telehealth and telepharmacy services. The application provides AI-powered voice agents, avatar consultations, appointment booking, prescription generation, and multi-channel communication features (SMS, WhatsApp, email). It's built as a demonstration platform with simulated functionality rather than a production healthcare system.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React SPA**: Built with React and TypeScript using Vite as the build tool\n- **UI Framework**: Implements shadcn/ui component library with Tailwind CSS for styling\n- **State Management**: Uses React Query (@tanstack/react-query) for server state and local React state for component-level data\n- **Routing**: Implements client-side routing with Wouter library\n- **Internationalization**: Multi-language support (English, German, Arabic) with RTL layout support\n- **Component Structure**: Modular component architecture with separate sections for telehealth and telepharmacy features\n\n## Backend Architecture\n- **Express.js Server**: RESTful API server with middleware for request logging and error handling\n- **Database Layer**: Uses Drizzle ORM with PostgreSQL (Neon serverless) for data persistence\n- **Service Layer**: Organized into separate services for email, SMS/WhatsApp, and prescription generation\n- **Development Setup**: Vite integration for hot module replacement in development mode\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL via Neon serverless connection\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Centralized schema definitions in shared directory\n- **Fallback Storage**: In-memory storage implementation for development/demo purposes\n\n## Authentication and Authorization\n- **User Management**: Basic user system with username/password authentication\n- **Session Handling**: Express session management with PostgreSQL session store\n- **Demo Mode**: Consent-based access for healthcare demonstrations\n\n## External Service Integrations\n- **Email Service**: SendGrid integration for sending healthcare summaries and prescriptions\n- **SMS/WhatsApp**: Twilio integration for text messaging and WhatsApp communications\n- **Communication Channels**: Multi-channel messaging system supporting email, SMS, and WhatsApp delivery\n- **Demo Fallback**: All external services have demo mode implementations that simulate functionality when API keys are not configured\n\n# External Dependencies\n\n- **Database**: Neon PostgreSQL serverless database\n- **Email Provider**: SendGrid for transactional emails\n- **SMS/WhatsApp Provider**: Twilio for messaging services  \n- **UI Components**: Radix UI primitives via shadcn/ui\n- **Styling**: Tailwind CSS with custom design tokens\n- **Development Tools**: Vite for development server and build tooling\n- **Replit Integration**: Specialized plugins for Replit development environment","size_bytes":3064},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { emailService } from \"./services/emailService\";\nimport { smsService } from \"./services/smsService\";\nimport { prescriptionService } from \"./services/prescriptionService\";\nimport { voiceAgentService } from \"./services/voiceAgentService\";\nimport { storage } from \"./storage\";\nimport multer from 'multer';\nimport { requireAuth, validatePatientAccess, AuthenticatedRequest } from './middleware/auth';\nimport { healthAssessmentService } from './services/healthAssessmentService';\nimport { z } from 'zod';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Configure multer for file uploads\n  const upload = multer({\n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      // Accept only audio files\n      if (file.mimetype.startsWith('audio/')) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only audio files are allowed'));\n      }\n    }\n  });\n\n  // Multer error handling middleware\n  const handleMulterError = (error: any, req: Request, res: Response, next: NextFunction) => {\n    if (error instanceof multer.MulterError) {\n      return res.status(400).json({\n        error: 'File upload error',\n        message: error.message\n      });\n    }\n    if (error.message === 'Only audio files are allowed') {\n      return res.status(400).json({\n        error: 'Invalid file type',\n        message: 'Only audio files are allowed'\n      });\n    }\n    next(error);\n  };\n\n  // Voice Agent endpoints (secured)\n  app.post(\"/api/voice/transcribe\", requireAuth, validatePatientAccess, upload.single('audio'), async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No audio file provided\" });\n      }\n\n      const { patientId, language, consultationType } = req.body;\n      \n      const transcript = await voiceAgentService.transcribeAudio(req.file.buffer, {\n        patientId,\n        language: language || 'en',\n        consultationType: consultationType || 'telehealth'\n      });\n\n      res.json({ \n        success: true, \n        transcript,\n        message: \"Audio transcribed successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error transcribing audio:\", error);\n      res.status(500).json({ error: \"Failed to transcribe audio\" });\n    }\n  });\n\n  app.post(\"/api/voice/chat\", requireAuth, validatePatientAccess, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { \n        message, \n        conversationHistory = [], \n        patientId, \n        consultationType = 'telehealth',\n        language = 'en'\n      } = req.body;\n\n      if (!message) {\n        return res.status(400).json({ error: \"Message is required\" });\n      }\n\n      const response = await voiceAgentService.processVoiceInput(\n        message,\n        conversationHistory,\n        { patientId, language, consultationType }\n      );\n\n      // Generate audio response if requested\n      let audioBuffer = null;\n      if (req.body.generateAudio) {\n        audioBuffer = await voiceAgentService.generateTextToSpeech(response.textResponse, {\n          language,\n          consultationType\n        });\n      }\n\n      res.json({\n        success: true,\n        response: response.textResponse,\n        actions: response.actions || [],\n        conversationId: response.conversationId,\n        hasAudio: !!audioBuffer,\n        audioData: audioBuffer ? audioBuffer.toString('base64') : null,\n        message: \"Voice agent response generated\"\n      });\n\n      // Save conversation to database if patientId provided\n      if (patientId && response.conversationId) {\n        try {\n          const messages = [\n            ...conversationHistory,\n            { role: 'user', content: message, timestamp: new Date() },\n            { role: 'assistant', content: response.textResponse, timestamp: new Date() }\n          ];\n          \n          await voiceAgentService.saveConversationToDatabase(\n            patientId,\n            messages,\n            consultationType\n          );\n        } catch (dbError) {\n          console.warn(\"Failed to save conversation to database:\", dbError);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error processing voice chat:\", error);\n      res.status(500).json({ error: \"Failed to process voice chat\" });\n    }\n  });\n\n  app.post(\"/api/voice/tts\", requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { text, language = 'en', consultationType = 'telehealth' } = req.body;\n\n      if (!text) {\n        return res.status(400).json({ error: \"Text is required\" });\n      }\n\n      const audioBuffer = await voiceAgentService.generateTextToSpeech(text, {\n        language,\n        consultationType\n      });\n\n      if (!audioBuffer) {\n        return res.json({ \n          success: true, \n          demoMode: true,\n          message: \"TTS demo mode - no audio generated\" \n        });\n      }\n\n      res.setHeader('Content-Type', 'audio/mpeg');\n      res.setHeader('Content-Length', audioBuffer.length);\n      res.setHeader('Content-Disposition', 'attachment; filename=\"voice-response.mp3\"');\n      res.send(audioBuffer);\n    } catch (error) {\n      console.error(\"Error generating text-to-speech:\", error);\n      res.status(500).json({ error: \"Failed to generate text-to-speech\" });\n    }\n  });\n\n  app.get(\"/api/voice/conversations/:patientId\", requireAuth, validatePatientAccess, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { patientId } = req.params;\n      const { consultationType } = req.query;\n\n      // Get consultations for the patient\n      const consultations = await storage.getConsultationsByPatient(patientId);\n      \n      // Filter by consultation type if specified\n      const filteredConsultations = consultationType \n        ? consultations.filter(c => c.consultationType === consultationType)\n        : consultations;\n\n      // Extract voice agent conversations (those with transcripts)\n      const voiceConversations = filteredConsultations\n        .filter(c => c.transcript)\n        .map(c => ({\n          id: c.id,\n          consultationType: c.consultationType,\n          reason: c.reason,\n          status: c.status,\n          createdAt: c.createdAt,\n          transcript: c.transcript ? JSON.parse(c.transcript) : [],\n          duration: c.duration\n        }));\n\n      res.json({\n        success: true,\n        conversations: voiceConversations,\n        total: voiceConversations.length\n      });\n    } catch (error) {\n      console.error(\"Error fetching voice conversations:\", error);\n      res.status(500).json({ error: \"Failed to fetch voice conversations\" });\n    }\n  });\n\n  // Telehealth endpoints\n  app.post(\"/api/telehealth/summary\", async (req, res) => {\n    try {\n      const { contactData, channel, summaryType } = req.body;\n      \n      if (!contactData.consent) {\n        return res.status(400).json({ error: \"User consent required\" });\n      }\n\n      const summary = {\n        context: \"telehealth\",\n        type: summaryType || \"consultation\",\n        patient: contactData.name || \"Demo User\",\n        timestamp: new Date().toISOString(),\n        content: {\n          reason: \"Follow-up for lab results (demo)\",\n          preferredSlot: \"Tomorrow 10:00\",\n          nextSteps: \"Confirmation & reminders via SMS/WhatsApp\"\n        }\n      };\n\n      let sent = false;\n      \n      switch (channel) {\n        case \"email\":\n          sent = await emailService.sendSummary(contactData.email, summary);\n          break;\n        case \"sms\":\n          sent = await smsService.sendSMS(contactData.phone, `Telehealth Summary: ${summary.content.reason}. Next steps: ${summary.content.nextSteps}`);\n          break;\n        case \"whatsapp\":\n          sent = await smsService.sendWhatsApp(contactData.phone, `📋 *Telehealth Summary*\\n\\nReason: ${summary.content.reason}\\nNext: ${summary.content.nextSteps}`);\n          break;\n        default:\n          return res.status(400).json({ error: \"Invalid channel\" });\n      }\n\n      if (sent) {\n        res.json({ success: true, message: \"Summary sent successfully\" });\n      } else {\n        res.status(500).json({ error: \"Failed to send summary\" });\n      }\n    } catch (error) {\n      console.error(\"Error sending telehealth summary:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/telehealth/prescription\", async (req, res) => {\n    try {\n      const { contactData, items = [] } = req.body;\n      \n      const prescription = await prescriptionService.generatePrescription({\n        patient: {\n          name: contactData.name || \"Demo User\",\n          email: contactData.email,\n          phone: contactData.phone\n        },\n        items,\n        context: \"telehealth\"\n      });\n\n      res.setHeader('Content-Type', 'text/html');\n      res.send(prescription);\n    } catch (error) {\n      console.error(\"Error generating prescription:\", error);\n      res.status(500).json({ error: \"Failed to generate prescription\" });\n    }\n  });\n\n  app.post(\"/api/telehealth/sick-note\", async (req, res) => {\n    try {\n      const { contactData, reason, startDate, duration, country, employerEmail } = req.body;\n      \n      const sickNote = await prescriptionService.generateSickNote({\n        patient: {\n          name: contactData.name || \"Demo User\",\n          email: contactData.email,\n          phone: contactData.phone\n        },\n        reason: reason || \"(not specified)\",\n        startDate: startDate || new Date().toISOString().split('T')[0],\n        duration: duration || 3,\n        country: country || \"DE\",\n        employerEmail\n      });\n\n      res.setHeader('Content-Type', 'text/html');\n      res.send(sickNote);\n    } catch (error) {\n      console.error(\"Error generating sick note:\", error);\n      res.status(500).json({ error: \"Failed to generate sick note\" });\n    }\n  });\n\n  // Tele-pharmacy endpoints\n  app.post(\"/api/telepharmacy/summary\", async (req, res) => {\n    try {\n      const { contactData, channel, summaryType, cart = [] } = req.body;\n      \n      if (!contactData.consent) {\n        return res.status(400).json({ error: \"User consent required\" });\n      }\n\n      const summary = {\n        context: \"telepharmacy\",\n        type: summaryType || \"product\",\n        patient: contactData.name || \"Demo User\",\n        timestamp: new Date().toISOString(),\n        content: {\n          products: cart.length ? cart.map((c: any) => `${c.id}x${c.qty}`).join(\", \") : \"(none)\",\n          advice: \"Demo label guidance; check contraindications and interactions.\",\n          nextSteps: \"Follow instructions; seek help if symptoms persist.\"\n        }\n      };\n\n      let sent = false;\n      \n      switch (channel) {\n        case \"email\":\n          sent = await emailService.sendSummary(contactData.email, summary);\n          break;\n        case \"sms\":\n          sent = await smsService.sendSMS(contactData.phone, `Pharmacy Summary: Products: ${summary.content.products}. Advice: ${summary.content.advice}`);\n          break;\n        case \"whatsapp\":\n          sent = await smsService.sendWhatsApp(contactData.phone, `🏥 *Pharmacy Summary*\\n\\nProducts: ${summary.content.products}\\nAdvice: ${summary.content.advice}`);\n          break;\n        default:\n          return res.status(400).json({ error: \"Invalid channel\" });\n      }\n\n      if (sent) {\n        res.json({ success: true, message: \"Summary sent successfully\" });\n      } else {\n        res.status(500).json({ error: \"Failed to send summary\" });\n      }\n    } catch (error) {\n      console.error(\"Error sending telepharmacy summary:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Health Assessment endpoints (secured)\n  app.get(\"/api/health/questionnaires\", requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const questionnaires = healthAssessmentService.getHealthQuestionnaires();\n      res.json({\n        success: true,\n        questionnaires,\n        message: \"Health questionnaires retrieved successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error fetching health questionnaires:\", error);\n      res.status(500).json({ error: \"Failed to fetch questionnaires\" });\n    }\n  });\n\n  // Health assessment request validation schema\n  const healthAssessmentSchema = z.object({\n    patientId: z.string().min(1),\n    assessmentType: z.string().optional().default('symptom_check'),\n    symptoms: z.array(z.string()).min(1, \"At least one symptom is required\"),\n    responses: z.record(z.any()).optional().default({}),\n    severity: z.record(z.number().min(1).max(10)).optional().default({}),\n    duration: z.record(z.string()).optional().default({}),\n    additionalInfo: z.string().optional().default('')\n  });\n\n  app.post(\"/api/health/assessment\", requireAuth, validatePatientAccess, async (req: AuthenticatedRequest, res) => {\n    try {\n      const validatedData = healthAssessmentSchema.parse(req.body);\n      const {\n        patientId,\n        assessmentType,\n        symptoms,\n        responses,\n        severity,\n        duration,\n        additionalInfo\n      } = validatedData;\n\n      // Get patient data for context\n      const patient = await storage.getPatient(patientId);\n      const patientConfig = patient ? {\n        patientAge: patient.dateOfBirth ? new Date().getFullYear() - new Date(patient.dateOfBirth).getFullYear() : undefined,\n        patientGender: patient.gender || undefined,\n        medicalHistory: [], // Would extract from medical records\n        currentMedications: [], // Would extract from prescriptions\n        allergies: [] // Would extract from patient data\n      } : undefined;\n\n      // Analyze symptoms with AI\n      const aiAnalysis = await healthAssessmentService.analyzeSymptoms({\n        symptoms,\n        severity,\n        duration,\n        additionalInfo,\n        patientConfig\n      });\n\n      // Create health assessment record\n      const assessment = await storage.createHealthAssessment({\n        patientId,\n        assessmentType,\n        symptoms,\n        responses,\n        aiAnalysis,\n        followUpRequired: aiAnalysis.followUpDays ? aiAnalysis.followUpDays <= 3 : false,\n        consultationRecommended: aiAnalysis.referralNeeded,\n        status: 'completed'\n      });\n\n      res.json({\n        success: true,\n        assessment: {\n          id: assessment.id,\n          assessmentType: assessment.assessmentType,\n          symptoms: assessment.symptoms,\n          aiAnalysis: assessment.aiAnalysis,\n          followUpRequired: assessment.followUpRequired,\n          consultationRecommended: assessment.consultationRecommended,\n          createdAt: assessment.createdAt\n        },\n        message: \"Health assessment completed successfully\"\n      });\n\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          error: \"Validation error\",\n          details: error.errors,\n          message: \"Please check your input and try again\"\n        });\n      }\n      console.error(\"Error creating health assessment:\", error);\n      res.status(500).json({ error: \"Failed to complete health assessment\" });\n    }\n  });\n\n  app.get(\"/api/health/assessments/:patientId\", requireAuth, validatePatientAccess, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { patientId } = req.params;\n      const { limit = 10, offset = 0 } = req.query;\n\n      const assessments = await storage.getHealthAssessmentsByPatient(\n        patientId,\n        Number(limit),\n        Number(offset)\n      );\n\n      res.json({\n        success: true,\n        assessments,\n        count: assessments.length,\n        message: \"Health assessments retrieved successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error fetching health assessments:\", error);\n      res.status(500).json({ error: \"Failed to fetch health assessments\" });\n    }\n  });\n\n  app.get(\"/api/health/assessment/:id\", requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const assessment = await storage.getHealthAssessment(id);\n\n      if (!assessment) {\n        return res.status(404).json({ \n          error: \"Assessment not found\",\n          message: \"The requested health assessment does not exist\"\n        });\n      }\n\n      // Verify the assessment belongs to a patient accessible by this user\n      const patient = await storage.getPatient(assessment.patientId);\n      if (!patient || (req.user?.id !== 'demo-user-id' && patient.userId !== req.user?.id)) {\n        return res.status(403).json({ \n          error: \"Access denied\",\n          message: \"You do not have permission to access this assessment\"\n        });\n      }\n\n      res.json({\n        success: true,\n        assessment,\n        message: \"Health assessment retrieved successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error fetching health assessment:\", error);\n      res.status(500).json({ error: \"Failed to fetch health assessment\" });\n    }\n  });\n\n  app.get(\"/api/health/emergency-symptoms\", requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const emergencySymptoms = healthAssessmentService.getEmergencySymptoms();\n      res.json({\n        success: true,\n        emergencySymptoms,\n        warning: \"If you experience any of these symptoms, seek immediate medical attention\",\n        message: \"Emergency symptoms list retrieved successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error fetching emergency symptoms:\", error);\n      res.status(500).json({ error: \"Failed to fetch emergency symptoms\" });\n    }\n  });\n\n  // Pharmacy endpoints\n  app.get(\"/api/pharmacy/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getPharmacyCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching pharmacy categories:\", error);\n      res.status(500).json({ error: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/pharmacy/products\", async (req, res) => {\n    try {\n      const { categoryId } = req.query;\n      \n      let products;\n      if (categoryId && typeof categoryId === 'string') {\n        products = await storage.getPharmacyProductsByCategory(categoryId);\n      } else {\n        products = await storage.getPharmacyProducts();\n      }\n      \n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching pharmacy products:\", error);\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/pharmacy/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const product = await storage.getPharmacyProduct(id);\n      \n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      \n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching pharmacy product:\", error);\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  // Add global error handling middleware\n  app.use(handleMulterError);\n  \n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":19232},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Patient, type InsertPatient,\n  type MedicalRecord, type InsertMedicalRecord,\n  type Consultation, type InsertConsultation,\n  type Prescription, type InsertPrescription,\n  type PharmacyCategory, type InsertPharmacyCategory,\n  type PharmacyProduct, type InsertPharmacyProduct,\n  type Appointment, type InsertAppointment,\n  type Payment, type InsertPayment,\n  type HealthAssessment, type InsertHealthAssessment,\n  users, patients, medicalRecords, consultations, prescriptions,\n  pharmacyCategories, pharmacyProducts, appointments, payments, healthAssessments\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc } from \"drizzle-orm\";\nimport { securityService } from \"./services/securityService\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  verifyUserPassword(username: string, password: string): Promise<User | null>;\n\n  // Patient operations\n  getPatient(id: string): Promise<Patient | undefined>;\n  getPatientByEmail(email: string): Promise<Patient | undefined>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatient(id: string, patient: Partial<InsertPatient>): Promise<Patient | undefined>;\n  getPatientsByUserId(userId: string): Promise<Patient[]>;\n\n  // Medical records operations\n  getMedicalRecord(id: string): Promise<MedicalRecord | undefined>;\n  getMedicalRecordsByPatient(patientId: string): Promise<MedicalRecord[]>;\n  createMedicalRecord(record: InsertMedicalRecord): Promise<MedicalRecord>;\n  updateMedicalRecord(id: string, record: Partial<InsertMedicalRecord>): Promise<MedicalRecord | undefined>;\n\n  // Consultation operations\n  getConsultation(id: string): Promise<Consultation | undefined>;\n  getConsultationsByPatient(patientId: string): Promise<Consultation[]>;\n  createConsultation(consultation: InsertConsultation): Promise<Consultation>;\n  updateConsultation(id: string, consultation: Partial<InsertConsultation>): Promise<Consultation | undefined>;\n\n  // Prescription operations\n  getPrescription(id: string): Promise<Prescription | undefined>;\n  getPrescriptionsByPatient(patientId: string): Promise<Prescription[]>;\n  createPrescription(prescription: InsertPrescription): Promise<Prescription>;\n  updatePrescription(id: string, prescription: Partial<InsertPrescription>): Promise<Prescription | undefined>;\n\n  // Pharmacy category operations\n  getPharmacyCategories(): Promise<PharmacyCategory[]>;\n  getPharmacyCategory(id: string): Promise<PharmacyCategory | undefined>;\n  createPharmacyCategory(category: InsertPharmacyCategory): Promise<PharmacyCategory>;\n\n  // Pharmacy product operations\n  getPharmacyProducts(): Promise<PharmacyProduct[]>;\n  getPharmacyProductsByCategory(categoryId: string): Promise<PharmacyProduct[]>;\n  getPharmacyProduct(id: string): Promise<PharmacyProduct | undefined>;\n  createPharmacyProduct(product: InsertPharmacyProduct): Promise<PharmacyProduct>;\n  updatePharmacyProduct(id: string, product: Partial<InsertPharmacyProduct>): Promise<PharmacyProduct | undefined>;\n  searchPharmacyProducts(query: string): Promise<PharmacyProduct[]>;\n\n  // Appointment operations\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  getAppointmentsByPatient(patientId: string): Promise<Appointment[]>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, appointment: Partial<InsertAppointment>): Promise<Appointment | undefined>;\n\n  // Payment operations\n  getPayment(id: string): Promise<Payment | undefined>;\n  getPaymentsByPatient(patientId: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment | undefined>;\n\n  // Health assessment operations\n  getHealthAssessment(id: string): Promise<HealthAssessment | undefined>;\n  getHealthAssessmentsByPatient(patientId: string): Promise<HealthAssessment[]>;\n  createHealthAssessment(assessment: InsertHealthAssessment): Promise<HealthAssessment>;\n  updateHealthAssessment(id: string, assessment: Partial<InsertHealthAssessment>): Promise<HealthAssessment | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    // Hash the password before storing\n    const hashedPassword = await securityService.hashPassword(user.password);\n    const userWithHashedPassword = { ...user, password: hashedPassword };\n    \n    const result = await db.insert(users).values(userWithHashedPassword).returning();\n    return result[0];\n  }\n\n  async verifyUserPassword(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return null;\n    \n    const isValidPassword = await securityService.verifyPassword(password, user.password);\n    return isValidPassword ? user : null;\n  }\n\n  // Patient operations\n  async getPatient(id: string): Promise<Patient | undefined> {\n    const result = await db.select().from(patients).where(eq(patients.id, id)).limit(1);\n    return result[0] ? this.decryptPatientData(result[0]) : undefined;\n  }\n\n  async getPatientByEmail(email: string): Promise<Patient | undefined> {\n    const result = await db.select().from(patients).where(eq(patients.email, email)).limit(1);\n    return result[0] ? this.decryptPatientData(result[0]) : undefined;\n  }\n\n  async createPatient(patient: InsertPatient): Promise<Patient> {\n    // Encrypt sensitive patient data\n    const encryptedPatient = {\n      ...patient,\n      medicalHistory: securityService.encryptSensitiveField(patient.medicalHistory),\n      insuranceInfo: securityService.encryptSensitiveField(patient.insuranceInfo),\n      emergencyContact: securityService.encryptSensitiveField(patient.emergencyContact),\n    };\n    \n    const result = await db.insert(patients).values(encryptedPatient as any).returning();\n    return this.decryptPatientData(result[0]);\n  }\n\n  async updatePatient(id: string, patient: Partial<InsertPatient>): Promise<Patient | undefined> {\n    // Encrypt sensitive fields if they're being updated\n    const encryptedUpdate = { ...patient };\n    if (patient.medicalHistory !== undefined) {\n      encryptedUpdate.medicalHistory = securityService.encryptSensitiveField(patient.medicalHistory);\n    }\n    if (patient.insuranceInfo !== undefined) {\n      encryptedUpdate.insuranceInfo = securityService.encryptSensitiveField(patient.insuranceInfo);\n    }\n    if (patient.emergencyContact !== undefined) {\n      encryptedUpdate.emergencyContact = securityService.encryptSensitiveField(patient.emergencyContact);\n    }\n    \n    const result = await db.update(patients).set(encryptedUpdate as any).where(eq(patients.id, id)).returning();\n    return result[0] ? this.decryptPatientData(result[0]) : undefined;\n  }\n\n  private decryptPatientData(patient: Patient): Patient {\n    return {\n      ...patient,\n      medicalHistory: securityService.decryptSensitiveField(patient.medicalHistory),\n      insuranceInfo: securityService.decryptSensitiveField(patient.insuranceInfo),\n      emergencyContact: securityService.decryptSensitiveField(patient.emergencyContact),\n    };\n  }\n\n  async getPatientsByUserId(userId: string): Promise<Patient[]> {\n    const results = await db.select().from(patients).where(eq(patients.userId, userId));\n    return results.map(patient => this.decryptPatientData(patient));\n  }\n\n  // Medical records operations\n  async getMedicalRecord(id: string): Promise<MedicalRecord | undefined> {\n    const result = await db.select().from(medicalRecords).where(eq(medicalRecords.id, id)).limit(1);\n    return result[0] ? this.decryptMedicalRecord(result[0]) : undefined;\n  }\n\n  async getMedicalRecordsByPatient(patientId: string): Promise<MedicalRecord[]> {\n    const results = await db.select().from(medicalRecords)\n      .where(eq(medicalRecords.patientId, patientId))\n      .orderBy(desc(medicalRecords.createdAt));\n    return results.map(record => this.decryptMedicalRecord(record));\n  }\n\n  async createMedicalRecord(record: InsertMedicalRecord): Promise<MedicalRecord> {\n    // Encrypt sensitive medical content\n    const encryptedRecord = {\n      ...record,\n      content: securityService.encryptMedicalData(record.content),\n    };\n    \n    const result = await db.insert(medicalRecords).values(encryptedRecord).returning();\n    return this.decryptMedicalRecord(result[0]);\n  }\n\n  async updateMedicalRecord(id: string, record: Partial<InsertMedicalRecord>): Promise<MedicalRecord | undefined> {\n    // Encrypt content if it's being updated\n    const encryptedUpdate = { ...record };\n    if (record.content !== undefined) {\n      encryptedUpdate.content = securityService.encryptMedicalData(record.content);\n    }\n    \n    const result = await db.update(medicalRecords).set(encryptedUpdate).where(eq(medicalRecords.id, id)).returning();\n    return result[0] ? this.decryptMedicalRecord(result[0]) : undefined;\n  }\n\n  private decryptMedicalRecord(record: MedicalRecord): MedicalRecord {\n    return {\n      ...record,\n      content: securityService.decryptMedicalData(record.content),\n    };\n  }\n\n  // Consultation operations\n  async getConsultation(id: string): Promise<Consultation | undefined> {\n    const result = await db.select().from(consultations).where(eq(consultations.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getConsultationsByPatient(patientId: string): Promise<Consultation[]> {\n    return await db.select().from(consultations)\n      .where(eq(consultations.patientId, patientId))\n      .orderBy(desc(consultations.createdAt));\n  }\n\n  async createConsultation(consultation: InsertConsultation): Promise<Consultation> {\n    const result = await db.insert(consultations).values(consultation).returning();\n    return result[0];\n  }\n\n  async updateConsultation(id: string, consultation: Partial<InsertConsultation>): Promise<Consultation | undefined> {\n    const result = await db.update(consultations).set(consultation).where(eq(consultations.id, id)).returning();\n    return result[0];\n  }\n\n  // Prescription operations\n  async getPrescription(id: string): Promise<Prescription | undefined> {\n    const result = await db.select().from(prescriptions).where(eq(prescriptions.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getPrescriptionsByPatient(patientId: string): Promise<Prescription[]> {\n    return await db.select().from(prescriptions)\n      .where(eq(prescriptions.patientId, patientId))\n      .orderBy(desc(prescriptions.createdAt));\n  }\n\n  async createPrescription(prescription: InsertPrescription): Promise<Prescription> {\n    const result = await db.insert(prescriptions).values(prescription as any).returning();\n    return result[0];\n  }\n\n  async updatePrescription(id: string, prescription: Partial<InsertPrescription>): Promise<Prescription | undefined> {\n    const result = await db.update(prescriptions).set(prescription as any).where(eq(prescriptions.id, id)).returning();\n    return result[0];\n  }\n\n  // Pharmacy category operations\n  async getPharmacyCategories(): Promise<PharmacyCategory[]> {\n    return await db.select().from(pharmacyCategories)\n      .where(eq(pharmacyCategories.isActive, true))\n      .orderBy(asc(pharmacyCategories.sortOrder));\n  }\n\n  async getPharmacyCategory(id: string): Promise<PharmacyCategory | undefined> {\n    const result = await db.select().from(pharmacyCategories).where(eq(pharmacyCategories.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createPharmacyCategory(category: InsertPharmacyCategory): Promise<PharmacyCategory> {\n    const result = await db.insert(pharmacyCategories).values(category).returning();\n    return result[0];\n  }\n\n  // Pharmacy product operations\n  async getPharmacyProducts(): Promise<PharmacyProduct[]> {\n    return await db.select().from(pharmacyProducts)\n      .where(eq(pharmacyProducts.isActive, true))\n      .orderBy(asc(pharmacyProducts.name));\n  }\n\n  async getPharmacyProductsByCategory(categoryId: string): Promise<PharmacyProduct[]> {\n    return await db.select().from(pharmacyProducts)\n      .where(and(eq(pharmacyProducts.categoryId, categoryId), eq(pharmacyProducts.isActive, true)))\n      .orderBy(asc(pharmacyProducts.name));\n  }\n\n  async getPharmacyProduct(id: string): Promise<PharmacyProduct | undefined> {\n    const result = await db.select().from(pharmacyProducts).where(eq(pharmacyProducts.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createPharmacyProduct(product: InsertPharmacyProduct): Promise<PharmacyProduct> {\n    const result = await db.insert(pharmacyProducts).values(product).returning();\n    return result[0];\n  }\n\n  async updatePharmacyProduct(id: string, product: Partial<InsertPharmacyProduct>): Promise<PharmacyProduct | undefined> {\n    const result = await db.update(pharmacyProducts).set(product).where(eq(pharmacyProducts.id, id)).returning();\n    return result[0];\n  }\n\n  async searchPharmacyProducts(query: string): Promise<PharmacyProduct[]> {\n    const searchTerm = `%${query.toLowerCase()}%`;\n    return await db.select().from(pharmacyProducts)\n      .where(and(\n        eq(pharmacyProducts.isActive, true),\n        // Note: This is a simplified search - in production you'd use full-text search\n      ));\n  }\n\n  // Appointment operations\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    const result = await db.select().from(appointments).where(eq(appointments.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getAppointmentsByPatient(patientId: string): Promise<Appointment[]> {\n    return await db.select().from(appointments)\n      .where(eq(appointments.patientId, patientId))\n      .orderBy(desc(appointments.scheduledAt));\n  }\n\n  async createAppointment(appointment: InsertAppointment): Promise<Appointment> {\n    const result = await db.insert(appointments).values(appointment).returning();\n    return result[0];\n  }\n\n  async updateAppointment(id: string, appointment: Partial<InsertAppointment>): Promise<Appointment | undefined> {\n    const result = await db.update(appointments).set(appointment).where(eq(appointments.id, id)).returning();\n    return result[0];\n  }\n\n  // Payment operations\n  async getPayment(id: string): Promise<Payment | undefined> {\n    const result = await db.select().from(payments).where(eq(payments.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getPaymentsByPatient(patientId: string): Promise<Payment[]> {\n    return await db.select().from(payments)\n      .where(eq(payments.patientId, patientId))\n      .orderBy(desc(payments.createdAt));\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const result = await db.insert(payments).values(payment as any).returning();\n    return result[0];\n  }\n\n  async updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment | undefined> {\n    const result = await db.update(payments).set(payment as any).where(eq(payments.id, id)).returning();\n    return result[0];\n  }\n\n  // Health assessment operations\n  async getHealthAssessment(id: string): Promise<HealthAssessment | undefined> {\n    const result = await db.select().from(healthAssessments).where(eq(healthAssessments.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getHealthAssessmentsByPatient(patientId: string): Promise<HealthAssessment[]> {\n    return await db.select().from(healthAssessments)\n      .where(eq(healthAssessments.patientId, patientId))\n      .orderBy(desc(healthAssessments.createdAt));\n  }\n\n  async createHealthAssessment(assessment: InsertHealthAssessment): Promise<HealthAssessment> {\n    const result = await db.insert(healthAssessments).values(assessment as any).returning();\n    return result[0];\n  }\n\n  async updateHealthAssessment(id: string, assessment: Partial<InsertHealthAssessment>): Promise<HealthAssessment | undefined> {\n    const result = await db.update(healthAssessments).set(assessment as any).where(eq(healthAssessments.id, id)).returning();\n    return result[0];\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":16486},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, integer, boolean, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table - basic authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// Patients table - extended patient information\nexport const patients = pgTable(\"patients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  dateOfBirth: text(\"date_of_birth\"),\n  gender: text(\"gender\"),\n  address: text(\"address\"),\n  emergencyContact: text(\"emergency_contact\"),\n  insuranceInfo: text(\"insurance_info\"),\n  allergies: text(\"allergies\").array(),\n  medications: text(\"medications\").array(),\n  medicalHistory: text(\"medical_history\"),\n  language: text(\"language\").default(\"en\"),\n  consentGiven: boolean(\"consent_given\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Medical records table - encrypted medical history and records\nexport const medicalRecords = pgTable(\"medical_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  recordType: text(\"record_type\").notNull(), // 'consultation', 'prescription', 'sick_note', 'health_assessment'\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(), // Encrypted medical data\n  attachments: text(\"attachments\").array(), // File URLs/paths\n  doctorName: text(\"doctor_name\"),\n  facilityName: text(\"facility_name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Consultations table - visit records and consultation data\nexport const consultations = pgTable(\"consultations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  consultationType: text(\"consultation_type\").notNull(), // 'telehealth', 'telepharmacy'\n  status: text(\"status\").default(\"scheduled\"), // 'scheduled', 'in_progress', 'completed', 'cancelled'\n  reason: text(\"reason\").notNull(),\n  symptoms: text(\"symptoms\").array(),\n  diagnosis: text(\"diagnosis\"),\n  treatment: text(\"treatment\"),\n  notes: text(\"notes\"),\n  preferredSlot: text(\"preferred_slot\"),\n  doctorId: varchar(\"doctor_id\"),\n  pharmacistId: varchar(\"pharmacist_id\"),\n  transcript: text(\"transcript\"), // Voice conversation transcript\n  voiceRecordingUrl: text(\"voice_recording_url\"),\n  videoCallUrl: text(\"video_call_url\"),\n  duration: integer(\"duration\"), // in minutes\n  scheduledAt: timestamp(\"scheduled_at\"),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Prescriptions table - generated prescriptions with details\nexport const prescriptions = pgTable(\"prescriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  consultationId: varchar(\"consultation_id\").references(() => consultations.id),\n  medications: json(\"medications\").$type<Array<{\n    name: string;\n    dosage: string;\n    frequency: string;\n    duration: string;\n    instructions: string;\n  }>>().notNull(),\n  doctorName: text(\"doctor_name\").notNull(),\n  facilityName: text(\"facility_name\").notNull(),\n  prescriptionNumber: text(\"prescription_number\").notNull(),\n  validUntil: timestamp(\"valid_until\").notNull(),\n  status: text(\"status\").default(\"active\"), // 'active', 'filled', 'expired', 'cancelled'\n  pharmacyNotes: text(\"pharmacy_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Pharmacy categories table\nexport const pharmacyCategories = pgTable(\"pharmacy_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  nameDE: text(\"name_de\"),\n  nameAR: text(\"name_ar\"),\n  description: text(\"description\"),\n  descriptionDE: text(\"description_de\"),\n  descriptionAR: text(\"description_ar\"),\n  icon: text(\"icon\"),\n  sortOrder: integer(\"sort_order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Pharmacy products table - real product database to replace DEMO_PRODUCTS\nexport const pharmacyProducts = pgTable(\"pharmacy_products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  categoryId: varchar(\"category_id\").references(() => pharmacyCategories.id).notNull(),\n  name: text(\"name\").notNull(),\n  nameDE: text(\"name_de\"),\n  nameAR: text(\"name_ar\"),\n  description: text(\"description\").notNull(),\n  descriptionDE: text(\"description_de\"),\n  descriptionAR: text(\"description_ar\"),\n  activeIngredient: text(\"active_ingredient\"),\n  dosage: text(\"dosage\"),\n  formulation: text(\"formulation\"), // 'tablet', 'capsule', 'liquid', 'cream', etc.\n  manufacturer: text(\"manufacturer\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").default(\"USD\"),\n  stockQuantity: integer(\"stock_quantity\").default(0),\n  minStockLevel: integer(\"min_stock_level\").default(10),\n  requiresPrescription: boolean(\"requires_prescription\").default(false),\n  ageRestriction: integer(\"age_restriction\"), // minimum age\n  contraindications: text(\"contraindications\").array(),\n  sideEffects: text(\"side_effects\").array(),\n  interactions: text(\"interactions\").array(),\n  storageInstructions: text(\"storage_instructions\"),\n  imageUrl: text(\"image_url\"),\n  barcode: text(\"barcode\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Appointments table - scheduled appointments\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  consultationId: varchar(\"consultation_id\").references(() => consultations.id),\n  appointmentType: text(\"appointment_type\").notNull(), // 'telehealth', 'telepharmacy'\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  duration: integer(\"duration\").default(30), // in minutes\n  status: text(\"status\").default(\"scheduled\"), // 'scheduled', 'confirmed', 'in_progress', 'completed', 'cancelled'\n  meetingUrl: text(\"meeting_url\"), // Video call URL\n  calendarEventId: text(\"calendar_event_id\"), // External calendar integration\n  reminderSent: boolean(\"reminder_sent\").default(false),\n  providerId: varchar(\"provider_id\"), // Doctor or pharmacist ID\n  providerName: text(\"provider_name\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payments table - payment transactions\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  consultationId: varchar(\"consultation_id\").references(() => consultations.id),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id),\n  paymentType: text(\"payment_type\").notNull(), // 'consultation', 'pharmacy', 'subscription'\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").default(\"USD\"),\n  status: text(\"status\").default(\"pending\"), // 'pending', 'processing', 'completed', 'failed', 'refunded'\n  paymentMethod: text(\"payment_method\"), // 'card', 'paypal', 'insurance'\n  transactionId: text(\"transaction_id\"), // External payment processor ID\n  stripePaymentIntentId: text(\"stripe_payment_intent_id\"),\n  items: json(\"items\").$type<Array<{\n    id: string;\n    name: string;\n    quantity: number;\n    price: number;\n  }>>(),\n  metadata: json(\"metadata\"),\n  processedAt: timestamp(\"processed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Health assessments table - AI-powered symptom checking results\nexport const healthAssessments = pgTable(\"health_assessments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id).notNull(),\n  assessmentType: text(\"assessment_type\").notNull(), // 'symptom_check', 'wellness_check', 'risk_assessment'\n  symptoms: text(\"symptoms\").array().notNull(),\n  responses: json(\"responses\").$type<Record<string, any>>().notNull(), // User responses to questionnaire\n  aiAnalysis: json(\"ai_analysis\").$type<{\n    diagnosis: string[];\n    recommendations: string[];\n    urgencyLevel: string;\n    referralNeeded: boolean;\n    riskScore: number;\n  }>().notNull(),\n  followUpRequired: boolean(\"follow_up_required\").default(false),\n  followUpScheduled: boolean(\"follow_up_scheduled\").default(false),\n  consultationRecommended: boolean(\"consultation_recommended\").default(false),\n  status: text(\"status\").default(\"completed\"), // 'in_progress', 'completed', 'reviewed'\n  reviewedBy: varchar(\"reviewed_by\"), // Healthcare provider ID\n  reviewNotes: text(\"review_notes\"),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Create insert schemas for all tables\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport const insertMedicalRecordSchema = createInsertSchema(medicalRecords).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport const insertConsultationSchema = createInsertSchema(consultations).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport const insertPrescriptionSchema = createInsertSchema(prescriptions).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport const insertPharmacyCategorySchema = createInsertSchema(pharmacyCategories).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertPharmacyProductSchema = createInsertSchema(pharmacyProducts).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport const insertHealthAssessmentSchema = createInsertSchema(healthAssessments).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\n// Export types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type Patient = typeof patients.$inferSelect;\n\nexport type InsertMedicalRecord = z.infer<typeof insertMedicalRecordSchema>;\nexport type MedicalRecord = typeof medicalRecords.$inferSelect;\n\nexport type InsertConsultation = z.infer<typeof insertConsultationSchema>;\nexport type Consultation = typeof consultations.$inferSelect;\n\nexport type InsertPrescription = z.infer<typeof insertPrescriptionSchema>;\nexport type Prescription = typeof prescriptions.$inferSelect;\n\nexport type InsertPharmacyCategory = z.infer<typeof insertPharmacyCategorySchema>;\nexport type PharmacyCategory = typeof pharmacyCategories.$inferSelect;\n\nexport type InsertPharmacyProduct = z.infer<typeof insertPharmacyProductSchema>;\nexport type PharmacyProduct = typeof pharmacyProducts.$inferSelect;\n\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\n\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Payment = typeof payments.$inferSelect;\n\nexport type InsertHealthAssessment = z.infer<typeof insertHealthAssessmentSchema>;\nexport type HealthAssessment = typeof healthAssessments.$inferSelect;\n","size_bytes":12565},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport { HealthAssessment } from \"@/pages/HealthAssessment\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/health-assessment\" component={HealthAssessment} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":831},"client/src/index.css":{"content":"@import url(\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\");\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(210, 100%, 40%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(180, 25%, 50%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(210, 100%, 40%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .rtl {\n    direction: rtl;\n  }\n\n  /* Custom styles for healthcare UI */\n  .medical-card {\n    background: linear-gradient(135deg, hsl(210, 100%, 40%) 0%, hsl(180, 25%, 50%) 100%);\n  }\n\n  .consultation-active {\n    animation: pulse-medical 2s infinite;\n  }\n\n  @keyframes pulse-medical {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.8; }\n  }\n\n  .avatar-container {\n    background: radial-gradient(circle at center, hsl(210, 40%, 98%) 0%, hsl(210, 40%, 96%) 100%);\n  }\n}\n","size_bytes":4483},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/emailService.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nclass EmailService {\n  private mailService: MailService;\n  \n  constructor() {\n    this.mailService = new MailService();\n    const apiKey = process.env.SENDGRID_API_KEY || process.env.EMAIL_API_KEY;\n    if (apiKey) {\n      this.mailService.setApiKey(apiKey);\n    }\n  }\n\n  async sendSummary(to: string, summary: any): Promise<boolean> {\n    if (!to) {\n      console.log(\"No email address provided\");\n      return false;\n    }\n\n    const fromEmail = process.env.FROM_EMAIL || \"noreply@nextviseai.com\";\n    \n    try {\n      if (!process.env.SENDGRID_API_KEY && !process.env.EMAIL_API_KEY) {\n        console.log(\"EMAIL DEMO: Would send summary to\", to, summary);\n        return true; // Demo mode - simulate success\n      }\n\n      const subject = `${summary.context === 'telehealth' ? 'Healthcare' : 'Pharmacy'} Summary - ${summary.patient}`;\n      \n      const htmlContent = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <title>${subject}</title>\n          <style>\n            body { font-family: system-ui, -apple-system, sans-serif; margin: 24px; line-height: 1.6; }\n            .header { background: #2563eb; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n            .content { background: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n            .footer { font-size: 12px; color: #64748b; text-align: center; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>NextViseAI ${summary.context === 'telehealth' ? 'Healthcare' : 'Pharmacy'} Summary</h1>\n            <p>Patient: ${summary.patient}</p>\n            <p>Date: ${new Date(summary.timestamp).toLocaleString()}</p>\n          </div>\n          <div class=\"content\">\n            <h3>Summary Details:</h3>\n            ${Object.entries(summary.content).map(([key, value]) => \n              `<p><strong>${key.charAt(0).toUpperCase() + key.slice(1)}:</strong> ${value}</p>`\n            ).join('')}\n          </div>\n          <div class=\"footer\">\n            <p>This is a demonstration platform. Not for actual medical use.</p>\n            <p>HIPAA/GDPR compliant processing • NextViseAI Healthcare Demos</p>\n          </div>\n        </body>\n        </html>\n      `;\n\n      await this.mailService.send({\n        to,\n        from: fromEmail,\n        subject,\n        html: htmlContent,\n      });\n\n      return true;\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      // Fall back to demo mode if SendGrid API fails (invalid key, 403, etc.)\n      console.log(\"EMAIL DEMO (fallback): Would send summary to\", to, summary);\n      return true; // Demo mode fallback - simulate success\n    }\n  }\n}\n\nexport const emailService = new EmailService();\n","size_bytes":2812},"server/services/prescriptionService.ts":{"content":"class PrescriptionService {\n  \n  async generatePrescription(data: {\n    patient: { name: string; email?: string; phone?: string };\n    items: any[];\n    context: string;\n  }): Promise<string> {\n    const now = new Date().toISOString().slice(0, 16).replace(\"T\", \" \");\n    const items = data.items.length \n      ? `<ul>${data.items.map(item => `<li>${item.id || item.name} × ${item.qty || item.quantity || 1}</li>`).join(\"\")}</ul>`\n      : `<em>No products specified (demo)</em>`;\n\n    return `<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>e-Prescription Demo - ${data.patient.name}</title>\n  <style>\n    body { font-family: system-ui, -apple-system, sans-serif; margin: 24px; line-height: 1.6; }\n    .header { background: #2563eb; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n    .patient-info { background: #f1f5f9; padding: 15px; border-radius: 6px; margin-bottom: 20px; }\n    .prescription { background: white; border: 2px solid #e2e8f0; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n    .footer { background: #fee2e2; padding: 15px; border-radius: 6px; text-align: center; color: #991b1b; }\n    .rx-number { font-family: monospace; background: #f8fafc; padding: 5px 10px; border-radius: 4px; }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <h1>🏥 Electronic Prescription</h1>\n    <p class=\"rx-number\">Rx #: DEMO-${Date.now()}</p>\n    <p>Generated: ${now}</p>\n  </div>\n  \n  <div class=\"patient-info\">\n    <h3>Patient Information</h3>\n    <p><strong>Name:</strong> ${data.patient.name}</p>\n    <p><strong>Email:</strong> ${data.patient.email || \"Not provided\"}</p>\n    <p><strong>Phone:</strong> ${data.patient.phone || \"Not provided\"}</p>\n  </div>\n  \n  <div class=\"prescription\">\n    <h3>Prescribed Items</h3>\n    ${items}\n    <p><strong>Prescribing Context:</strong> ${data.context}</p>\n    <p><strong>Instructions:</strong> Follow dosage instructions as discussed during consultation.</p>\n    <p><strong>Refills:</strong> 0 refills authorized</p>\n  </div>\n  \n  <div class=\"footer\">\n    <p><strong>⚠️ DEMONSTRATION ONLY ⚠️</strong></p>\n    <p>This is a DEMO document and is NOT valid for dispensing medications.</p>\n    <p>For educational and demonstration purposes only.</p>\n  </div>\n</body>\n</html>`;\n  }\n\n  async generateSickNote(data: {\n    patient: { name: string; email?: string; phone?: string };\n    reason: string;\n    startDate: string;\n    duration: number;\n    country: string;\n    employerEmail?: string;\n  }): Promise<string> {\n    const now = new Date().toISOString().slice(0, 10);\n    \n    return `<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Medical Certificate - ${data.patient.name}</title>\n  <style>\n    body { font-family: system-ui, -apple-system, sans-serif; margin: 24px; line-height: 1.6; }\n    .header { background: #16a34a; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n    .certificate { background: white; border: 2px solid #d4d4d8; padding: 25px; border-radius: 8px; margin-bottom: 20px; }\n    .patient-info { background: #f8fafc; padding: 15px; border-radius: 6px; margin-bottom: 15px; }\n    .medical-details { background: #fef3c7; padding: 15px; border-radius: 6px; margin-bottom: 15px; }\n    .footer { background: #fef2f2; padding: 15px; border-radius: 6px; text-align: center; color: #991b1b; }\n    .cert-number { font-family: monospace; background: #f0f9ff; padding: 5px 10px; border-radius: 4px; }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <h1>🏥 Medical Certificate / Sick Note</h1>\n    <p class=\"cert-number\">Certificate #: DEMO-SICK-${Date.now()}</p>\n    <p>Country: ${data.country} | Issued: ${now}</p>\n  </div>\n  \n  <div class=\"certificate\">\n    <div class=\"patient-info\">\n      <h3>Patient Information</h3>\n      <p><strong>Name:</strong> ${data.patient.name}</p>\n      <p><strong>Email:</strong> ${data.patient.email || \"Not provided\"}</p>\n      <p><strong>Phone:</strong> ${data.patient.phone || \"Not provided\"}</p>\n    </div>\n    \n    <div class=\"medical-details\">\n      <h3>Medical Certificate Details</h3>\n      <p><strong>Start Date:</strong> ${data.startDate || now}</p>\n      <p><strong>Duration:</strong> ${data.duration} days</p>\n      <p><strong>Reason/Symptoms:</strong> ${data.reason}</p>\n      <p><strong>Return to Work Date:</strong> ${new Date(new Date(data.startDate || now).getTime() + data.duration * 24 * 60 * 60 * 1000).toISOString().slice(0, 10)}</p>\n    </div>\n    \n    ${data.employerEmail ? `\n    <div style=\"background: #f0f9ff; padding: 15px; border-radius: 6px;\">\n      <h3>Employer Information</h3>\n      <p><strong>Employer Contact:</strong> ${data.employerEmail}</p>\n      <p><em>This certificate should be forwarded to the employer as per local regulations.</em></p>\n    </div>\n    ` : ''}\n    \n    <div style=\"margin-top: 20px; text-align: center;\">\n      <p><strong>Attending Physician:</strong> Dr. Virtual Demo (Demo Only)</p>\n      <p><strong>Medical License:</strong> DEMO-LICENSE-123456</p>\n      <p><em>Digital signature would appear here in production</em></p>\n    </div>\n  </div>\n  \n  <div class=\"footer\">\n    <p><strong>⚠️ DEMONSTRATION ONLY ⚠️</strong></p>\n    <p>This is a DEMO document and is NOT a valid medical certificate.</p>\n    <p>For educational and demonstration purposes only.</p>\n  </div>\n</body>\n</html>`;\n  }\n}\n\nexport const prescriptionService = new PrescriptionService();\n","size_bytes":5418},"server/services/smsService.ts":{"content":"class SMSService {\n  private twilioAccountSid?: string;\n  private twilioAuthToken?: string;\n  private twilioPhoneNumber?: string;\n\n  constructor() {\n    this.twilioAccountSid = process.env.TWILIO_ACCOUNT_SID;\n    this.twilioAuthToken = process.env.TWILIO_AUTH_TOKEN;\n    this.twilioPhoneNumber = process.env.TWILIO_PHONE_NUMBER;\n  }\n\n  async sendSMS(to: string, message: string): Promise<boolean> {\n    if (!to) {\n      console.log(\"No phone number provided\");\n      return false;\n    }\n\n    try {\n      if (!this.twilioAccountSid || !this.twilioAuthToken || !this.twilioPhoneNumber) {\n        console.log(\"SMS DEMO: Would send to\", to, \"Message:\", message);\n        return true; // Demo mode - simulate success\n      }\n\n      // In production, use Twilio SDK\n      const twilio = require('twilio')(this.twilioAccountSid, this.twilioAuthToken);\n      \n      await twilio.messages.create({\n        body: message,\n        from: this.twilioPhoneNumber,\n        to: to\n      });\n\n      return true;\n    } catch (error) {\n      console.error(\"Error sending SMS:\", error);\n      return false;\n    }\n  }\n\n  async sendWhatsApp(to: string, message: string): Promise<boolean> {\n    if (!to) {\n      console.log(\"No phone number provided\");\n      return false;\n    }\n\n    try {\n      if (!this.twilioAccountSid || !this.twilioAuthToken || !this.twilioPhoneNumber) {\n        console.log(\"WHATSAPP DEMO: Would send to\", to, \"Message:\", message);\n        return true; // Demo mode - simulate success\n      }\n\n      // In production, use Twilio SDK for WhatsApp\n      const twilio = require('twilio')(this.twilioAccountSid, this.twilioAuthToken);\n      \n      await twilio.messages.create({\n        body: message,\n        from: `whatsapp:${this.twilioPhoneNumber}`,\n        to: `whatsapp:${to}`\n      });\n\n      return true;\n    } catch (error) {\n      console.error(\"Error sending WhatsApp:\", error);\n      return false;\n    }\n  }\n}\n\nexport const smsService = new SMSService();\n","size_bytes":1964},"client/src/components/ContactForm.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\ninterface ContactFormProps {\n  contactData: {\n    name: string;\n    phone: string;\n    email: string;\n    consent: boolean;\n  };\n  setContactData: (data: any) => void;\n  t: any;\n}\n\nexport default function ContactForm({ contactData, setContactData, t }: ContactFormProps) {\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setContactData((prev: any) => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Card className=\"mb-8\" data-testid=\"contact-form\">\n      <CardContent className=\"p-6\">\n        <div className=\"mb-4\">\n          <h2 className=\"text-lg font-semibold text-foreground mb-2\">{t.contactInfo}</h2>\n          <p className=\"text-sm text-muted-foreground\">{t.contactDesc}</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n          <div className=\"space-y-2\">\n            <Label className=\"text-sm font-medium text-foreground\">{t.name}</Label>\n            <Input\n              type=\"text\"\n              placeholder={t.fullName}\n              value={contactData.name}\n              onChange={(e) => handleInputChange('name', e.target.value)}\n              data-testid=\"input-name\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label className=\"text-sm font-medium text-foreground\">{t.phone}</Label>\n            <Input\n              type=\"tel\"\n              placeholder={t.phoneNumber}\n              value={contactData.phone}\n              onChange={(e) => handleInputChange('phone', e.target.value)}\n              data-testid=\"input-phone\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label className=\"text-sm font-medium text-foreground\">{t.email}</Label>\n            <Input\n              type=\"email\"\n              placeholder={t.emailAddress}\n              value={contactData.email}\n              onChange={(e) => handleInputChange('email', e.target.value)}\n              data-testid=\"input-email\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"flex items-start gap-3 p-4 bg-muted/50 rounded-lg border border-border\">\n          <Checkbox\n            id=\"consent\"\n            checked={contactData.consent}\n            onCheckedChange={(checked) => handleInputChange('consent', checked as boolean)}\n            data-testid=\"checkbox-consent\"\n          />\n          <Label htmlFor=\"consent\" className=\"text-sm text-foreground leading-relaxed\">\n            <span className=\"font-medium\">{t.consentLabel}</span> {t.consentText}\n          </Label>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2801},"client/src/components/ServiceTabs.tsx":{"content":"interface ServiceTabsProps {\n  activeTab: \"telehealth\" | \"telepharmacy\";\n  setActiveTab: (tab: \"telehealth\" | \"telepharmacy\") => void;\n  t: any;\n}\n\nexport default function ServiceTabs({ activeTab, setActiveTab, t }: ServiceTabsProps) {\n  return (\n    <div className=\"flex gap-2 mb-8 p-1 bg-muted rounded-xl\" data-testid=\"service-tabs\">\n      <button\n        onClick={() => setActiveTab(\"telehealth\")}\n        className={`flex-1 px-6 py-3 rounded-lg font-medium shadow-sm transition-all flex items-center justify-center gap-2 ${\n          activeTab === \"telehealth\"\n            ? \"bg-card text-foreground\"\n            : \"text-muted-foreground hover:text-foreground hover:bg-card/50\"\n        }`}\n        data-testid=\"tab-telehealth\"\n      >\n        <i className=\"fas fa-video\"></i>\n        {t.tabs.th}\n      </button>\n      <button\n        onClick={() => setActiveTab(\"telepharmacy\")}\n        className={`flex-1 px-6 py-3 rounded-lg font-medium shadow-sm transition-all flex items-center justify-center gap-2 ${\n          activeTab === \"telepharmacy\"\n            ? \"bg-card text-foreground\"\n            : \"text-muted-foreground hover:text-foreground hover:bg-card/50\"\n        }`}\n        data-testid=\"tab-telepharmacy\"\n      >\n        <i className=\"fas fa-pills\"></i>\n        {t.tabs.tp}\n      </button>\n    </div>\n  );\n}\n","size_bytes":1320},"client/src/components/SickNoteModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SickNoteModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  contactData: {\n    name: string;\n    phone: string;\n    email: string;\n    consent: boolean;\n  };\n  t: any;\n}\n\nexport default function SickNoteModal({ isOpen, onClose, contactData, t }: SickNoteModalProps) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    reason: \"\",\n    startDate: new Date().toISOString().split('T')[0],\n    duration: 3,\n    country: \"DE\",\n    employerEmail: \"\"\n  });\n\n  const generateSickNoteMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/telehealth/sick-note\", {\n        contactData,\n        ...formData\n      });\n    },\n    onSuccess: async (response) => {\n      const htmlContent = await response.text();\n      const blob = new Blob([htmlContent], { type: \"text/html\" });\n      const url = URL.createObjectURL(blob);\n      window.open(url, \"_blank\");\n      toast({\n        title: \"Sick Note Generated\",\n        description: \"Medical certificate has been generated and opened in a new tab\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate sick note. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleInputChange = (field: string, value: string | number) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!contactData.consent) {\n      toast({\n        title: \"Consent Required\",\n        description: \"Please provide consent to generate medical documents.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    generateSickNoteMutation.mutate();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"w-full max-w-md\" data-testid=\"sick-note-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-file-medical-alt text-secondary\"></i>\n            {t.snTitle}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label className=\"text-sm font-medium text-foreground\">{t.reason}</Label>\n            <Textarea\n              className=\"resize-none\"\n              rows={3}\n              placeholder=\"Brief description of symptoms...\"\n              value={formData.reason}\n              onChange={(e) => handleInputChange('reason', e.target.value)}\n              data-testid=\"textarea-reason\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium text-foreground\">{t.startDate}</Label>\n              <Input\n                type=\"date\"\n                value={formData.startDate}\n                onChange={(e) => handleInputChange('startDate', e.target.value)}\n                data-testid=\"input-start-date\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label className=\"text-sm font-medium text-foreground\">{t.duration}</Label>\n              <Input\n                type=\"number\"\n                min={1}\n                max={30}\n                value={formData.duration}\n                onChange={(e) => handleInputChange('duration', parseInt(e.target.value) || 1)}\n                data-testid=\"input-duration\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label className=\"text-sm font-medium text-foreground\">{t.country}</Label>\n            <select\n              value={formData.country}\n              onChange={(e) => handleInputChange('country', e.target.value)}\n              className=\"w-full px-4 py-3 rounded-lg border border-input bg-background focus:border-ring focus:ring-2 focus:ring-ring/20 transition-colors\"\n              data-testid=\"select-country\"\n            >\n              <option value=\"DE\">Germany</option>\n              <option value=\"US\">United States</option>\n              <option value=\"UK\">United Kingdom</option>\n              <option value=\"CA\">Canada</option>\n            </select>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label className=\"text-sm font-medium text-foreground\">{t.employerEmail}</Label>\n            <Input\n              type=\"email\"\n              placeholder=\"hr@company.com\"\n              value={formData.employerEmail}\n              onChange={(e) => handleInputChange('employerEmail', e.target.value)}\n              data-testid=\"input-employer-email\"\n            />\n          </div>\n          \n          <div className=\"flex gap-3 pt-4\">\n            <Button\n              type=\"submit\"\n              className=\"flex-1 bg-secondary hover:bg-secondary/90\"\n              disabled={generateSickNoteMutation.isPending}\n              data-testid=\"button-create-sick-note\"\n            >\n              {generateSickNoteMutation.isPending ? \"Creating...\" : t.create}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel\"\n            >\n              {t.cancel}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5905},"client/src/components/TelehealthSection.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface TelehealthSectionProps {\n  contactData: {\n    name: string;\n    phone: string;\n    email: string;\n    consent: boolean;\n  };\n  t: any;\n  onOpenSickNote: () => void;\n}\n\nexport default function TelehealthSection({ contactData, t, onOpenSickNote }: TelehealthSectionProps) {\n  const { toast } = useToast();\n  const [summaryChannel, setSummaryChannel] = useState<\"sms\" | \"whatsapp\" | \"email\">(\"sms\");\n\n\n  const sendSummaryMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/telehealth/summary\", {\n        contactData,\n        channel: summaryChannel,\n        summaryType: \"consultation\"\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Summary Sent\",\n        description: `Visit summary has been sent via ${summaryChannel.toUpperCase()}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send summary. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const generatePrescriptionMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/telehealth/prescription\", {\n        contactData,\n        items: []\n      });\n    },\n    onSuccess: async (response) => {\n      const htmlContent = await response.text();\n      const blob = new Blob([htmlContent], { type: \"text/html\" });\n      const url = URL.createObjectURL(blob);\n      window.open(url, \"_blank\");\n      toast({\n        title: \"Prescription Generated\",\n        description: \"E-prescription has been generated and opened in a new tab\",\n      });\n    }\n  });\n\n  const voiceAgentUrl = import.meta.env.VITE_VOICE_AGENT_URL || \"#\";\n  const calendarUrl = import.meta.env.VITE_CALENDAR_URL || \"#\";\n  const doctorHandoffUrl = import.meta.env.VITE_DOCTOR_HANDOFF_URL || \"#\";\n\n  return (\n    <section className=\"space-y-8\" data-testid=\"telehealth-section\">\n      {/* Service Hero */}\n      <div className=\"medical-card rounded-2xl p-8 text-white\">\n        <div className=\"max-w-2xl\">\n          <h2 className=\"text-3xl font-bold mb-4\">{t.thTitle}</h2>\n          <p className=\"text-lg text-white/90 mb-6\">{t.thSub}</p>\n          <div className=\"flex flex-wrap gap-4\">\n            <Button\n              className=\"bg-white text-primary hover:bg-white/90\"\n              onClick={() => window.open(voiceAgentUrl, \"_blank\")}\n              data-testid=\"button-start-agent\"\n            >\n              <i className=\"fas fa-microphone mr-2\"></i>\n              {t.startAgent}\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"bg-white/20 backdrop-blur-sm text-white border-white/30 hover:bg-white/30\"\n              onClick={() => window.open(calendarUrl, \"_blank\")}\n              data-testid=\"button-schedule\"\n            >\n              <i className=\"fas fa-calendar mr-2\"></i>\n              {t.scheduleNow}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Voice Agent and Avatar Consultation */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <Card data-testid=\"voice-agent-card\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n              <i className=\"fas fa-microphone-alt text-primary\"></i>\n              Voice Agent Interface\n            </h3>\n            <div className=\"bg-muted/30 rounded-lg p-6 min-h-[200px] flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4 consultation-active\">\n                  <i className=\"fas fa-microphone text-primary-foreground text-xl\"></i>\n                </div>\n                <p className=\"text-muted-foreground\">Voice agent widget will embed here</p>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Integration with voice agent provider\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"avatar-consultation-card\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n              <i className=\"fas fa-user-md text-secondary\"></i>\n              Avatar Tele-Consultation\n            </h3>\n            <div \n              className=\"avatar-container rounded-lg p-0 min-h-[400px] border border-border overflow-hidden bg-background\"\n              data-testid=\"did-avatar-container\"\n            >\n              {/* Direct iframe embed as alternative to script integration */}\n              <iframe\n                src=\"https://agent.d-id.com/v2/index.html?client-key=YXV0aDB8NjhjZDMzZmIyZmJmN2RmMjY0ODkzOTA2OnFyVjFwWDlaWkktUk1JRUhDVVowNA==&agent-id=v2_agt_rlPFem2o\"\n                className=\"w-full h-full border-0 rounded-lg\"\n                allow=\"microphone; camera\"\n                title=\"D-ID Avatar Agent\"\n                onLoad={() => console.log('D-ID iframe loaded')}\n                onError={() => console.log('D-ID iframe failed to load')}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Consultation Tools */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <Card data-testid=\"visit-summary-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-4\">\n              <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-file-medical text-accent\"></i>\n              </div>\n              <h3 className=\"font-semibold text-foreground\">Visit Summary</h3>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"bg-muted/50 p-3 rounded-md text-sm\">\n                <p className=\"text-muted-foreground\">{t.visitSummaryDesc}</p>\n              </div>\n              <div className=\"flex items-center gap-2 mb-2\">\n                <select\n                  value={summaryChannel}\n                  onChange={(e) => setSummaryChannel(e.target.value as any)}\n                  className=\"flex-1 px-2 py-1 text-xs border border-input rounded-md bg-background\"\n                  data-testid=\"select-summary-channel\"\n                >\n                  <option value=\"sms\">{t.sms}</option>\n                  <option value=\"whatsapp\">{t.whatsapp}</option>\n                  <option value=\"email\">{t.emailCh}</option>\n                </select>\n              </div>\n              <Button\n                className=\"w-full bg-accent hover:bg-accent/90\"\n                size=\"sm\"\n                onClick={() => sendSummaryMutation.mutate()}\n                disabled={!contactData.consent || sendSummaryMutation.isPending}\n                data-testid=\"button-send-summary\"\n              >\n                {sendSummaryMutation.isPending ? \"Sending...\" : t.sendSummary}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"prescription-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-4\">\n              <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-prescription-bottle text-primary\"></i>\n              </div>\n              <h3 className=\"font-semibold text-foreground\">E-Prescription</h3>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"bg-muted/50 p-3 rounded-md text-sm\">\n                <p className=\"text-muted-foreground\">{t.ePrescriptionDesc}</p>\n              </div>\n              <Button\n                className=\"w-full bg-primary hover:bg-primary/90\"\n                size=\"sm\"\n                onClick={() => generatePrescriptionMutation.mutate()}\n                disabled={generatePrescriptionMutation.isPending}\n                data-testid=\"button-generate-prescription\"\n              >\n                {generatePrescriptionMutation.isPending ? \"Generating...\" : t.genErx}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"sick-note-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3 mb-4\">\n              <div className=\"w-10 h-10 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-file-medical-alt text-secondary\"></i>\n              </div>\n              <h3 className=\"font-semibold text-foreground\">Sick Note</h3>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"bg-muted/50 p-3 rounded-md text-sm\">\n                <p className=\"text-muted-foreground\">{t.sickNoteDesc}</p>\n              </div>\n              <Button\n                className=\"w-full bg-secondary hover:bg-secondary/90\"\n                size=\"sm\"\n                onClick={onOpenSickNote}\n                data-testid=\"button-sick-note\"\n              >\n                {t.sickNote}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Doctor Handoff */}\n      <Card data-testid=\"doctor-handoff-card\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-user-doctor text-primary text-xl\"></i>\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground\">{t.doctorHandoffTitle}</h3>\n              <p className=\"text-muted-foreground\">{t.doctorHandoffDesc}</p>\n            </div>\n          </div>\n          <div className=\"flex flex-wrap gap-4\">\n            <Button\n              className=\"bg-primary hover:bg-primary/90\"\n              onClick={() => window.open(doctorHandoffUrl, \"_blank\")}\n              data-testid=\"button-book-doctor\"\n            >\n              <i className=\"fas fa-calendar-check mr-2\"></i>\n              {t.bookDoctor}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => window.open(doctorHandoffUrl, \"_blank\")}\n              data-testid=\"button-emergency\"\n            >\n              <i className=\"fas fa-phone mr-2\"></i>\n              {t.emergencyConsult}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":10822},"client/src/components/TelepharmacySection.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PharmacyProduct {\n  id: string;\n  name: string;\n  nameDE?: string;\n  nameAR?: string;\n  description: string;\n  descriptionDE?: string;\n  descriptionAR?: string;\n  price: string;\n  currency: string;\n  stockQuantity: number;\n  activeIngredient?: string;\n  dosage?: string;\n  requiresPrescription: boolean;\n}\n\ninterface TelepharmacySectionProps {\n  contactData: {\n    name: string;\n    phone: string;\n    email: string;\n    consent: boolean;\n  };\n  t: any;\n}\n\nexport default function TelepharmacySection({ contactData, t }: TelepharmacySectionProps) {\n  const { toast } = useToast();\n  const [cart, setCart] = useState<{ id: string; qty: number }[]>([]);\n  const [summaryChannel, setSummaryChannel] = useState<\"sms\" | \"whatsapp\" | \"email\">(\"sms\");\n  const [summaryType, setSummaryType] = useState<\"consultation\" | \"product\" | \"prescription\">(\"product\");\n\n  // Fetch pharmacy products from database\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: ['/api/pharmacy/products'],\n    queryFn: async () => {\n      const response = await fetch('/api/pharmacy/products');\n      if (!response.ok) {\n        throw new Error('Failed to fetch products');\n      }\n      return response.json() as Promise<PharmacyProduct[]>;\n    }\n  });\n\n  const addToCart = (productId: string) => {\n    setCart(prev => {\n      const existing = prev.find(item => item.id === productId);\n      if (existing) {\n        return prev.map(item =>\n          item.id === productId ? { ...item, qty: item.qty + 1 } : item\n        );\n      }\n      return [...prev, { id: productId, qty: 1 }];\n    });\n    \n    toast({\n      title: \"Added to Cart\",\n      description: `Product added to your cart`,\n    });\n  };\n\n  const removeFromCart = (productId: string) => {\n    setCart(prev => prev.filter(item => item.id !== productId));\n  };\n\n  const sendSummaryMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/telepharmacy/summary\", {\n        contactData,\n        channel: summaryChannel,\n        summaryType,\n        cart\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Summary Sent\",\n        description: `Pharmacy summary sent via ${summaryChannel.toUpperCase()}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send summary. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const voiceAgentUrl = import.meta.env.VITE_VOICE_AGENT_URL || \"#\";\n\n  return (\n    <section className=\"space-y-8\" data-testid=\"telepharmacy-section\">\n      {/* Service Hero */}\n      <div className=\"bg-gradient-to-r from-secondary to-accent rounded-2xl p-8 text-white\">\n        <div className=\"max-w-2xl\">\n          <h2 className=\"text-3xl font-bold mb-4\">{t.tpTitle}</h2>\n          <p className=\"text-lg text-white/90 mb-6\">{t.tpSub}</p>\n          <div className=\"flex flex-wrap gap-4\">\n            <Button\n              className=\"bg-white text-secondary hover:bg-white/90\"\n              onClick={() => window.open(voiceAgentUrl, \"_blank\")}\n              data-testid=\"button-start-consultation\"\n            >\n              <i className=\"fas fa-comments mr-2\"></i>\n              Start Consultation\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"bg-white/20 backdrop-blur-sm text-white border-white/30 hover:bg-white/30\"\n              data-testid=\"button-browse-products\"\n            >\n              <i className=\"fas fa-search mr-2\"></i>\n              Browse Products\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Product Catalog and Pharmacist Avatar */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Product Catalog */}\n        <div className=\"lg:col-span-2\">\n          <Card data-testid=\"product-catalog\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <i className=\"fas fa-pills text-secondary\"></i>\n                {t.productCatalog}\n              </h3>\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6\">\n                {productsLoading ? (\n                  <div className=\"col-span-full text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n                    <p>Loading products...</p>\n                  </div>\n                ) : products.map((product) => {\n                  // Get localized product name based on current language\n                  const getProductName = () => {\n                    switch(t.lang) {\n                      case 'de': return product.nameDE || product.name;\n                      case 'ar': return product.nameAR || product.name;\n                      default: return product.name;\n                    }\n                  };\n\n                  const getProductDescription = () => {\n                    switch(t.lang) {\n                      case 'de': return product.descriptionDE || product.description;\n                      case 'ar': return product.descriptionAR || product.description;\n                      default: return product.description;\n                    }\n                  };\n\n                  return (\n                    <div key={product.id} className=\"border border-border rounded-lg p-4 hover:shadow-md transition-shadow\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <i className=\"fas fa-tablets text-muted-foreground\"></i>\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-foreground\">{getProductName()}</h4>\n                          {product.dosage && (\n                            <p className=\"text-sm text-muted-foreground\">\n                              {product.activeIngredient} {product.dosage}\n                            </p>\n                          )}\n                          <p className=\"text-sm text-muted-foreground mt-1 line-clamp-2\">{getProductDescription()}</p>\n                          <div className=\"flex items-center justify-between mt-2\">\n                            <span className=\"text-sm font-medium\">${product.price}</span>\n                            <Button\n                              size=\"sm\"\n                              className=\"bg-secondary hover:bg-secondary/90\"\n                              onClick={() => addToCart(product.id)}\n                              data-testid={`button-add-${product.id.replace(/[^a-z0-9]/gi, '_')}`}\n                              disabled={product.stockQuantity <= 0}\n                            >\n                              {product.stockQuantity <= 0 ? 'Out of Stock' : t.add}\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n              \n              {/* Shopping Cart */}\n              {cart.length > 0 && (\n                <div className=\"border-t border-border pt-6\">\n                  <h4 className=\"font-medium mb-4 flex items-center gap-2\">\n                    <i className=\"fas fa-shopping-cart text-accent\"></i>\n                    {t.cart} ({cart.length} items)\n                  </h4>\n                  <div className=\"space-y-2 mb-4\" data-testid=\"cart-items\">\n                    {cart.map((item) => {\n                      const product = products.find(p => p.id === item.id);\n                      \n                      const getProductName = () => {\n                        if (!product) return item.id;\n                        switch(t.lang) {\n                          case 'de': return product.nameDE || product.name;\n                          case 'ar': return product.nameAR || product.name;\n                          default: return product.name;\n                        }\n                      };\n\n                      return (\n                        <div key={item.id} className=\"flex items-center justify-between py-2 px-3 bg-muted/30 rounded-md\">\n                          <span className=\"text-sm\">\n                            {getProductName()} × {item.qty}\n                            {product && <span className=\"text-xs text-muted-foreground ml-2\">${(parseFloat(product.price) * item.qty).toFixed(2)}</span>}\n                          </span>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"text-destructive hover:text-destructive/80 text-xs h-auto p-1\"\n                            onClick={() => removeFromCart(item.id)}\n                            data-testid={`button-remove-${item.id.replace(/[^a-z0-9]/gi, '_')}`}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Pharmacist Avatar */}\n        <Card data-testid=\"pharmacist-avatar\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n              <i className=\"fas fa-user-graduate text-accent\"></i>\n              {t.pharmacistAvatar}\n            </h3>\n            <div className=\"avatar-container rounded-lg p-6 min-h-[300px] flex flex-col items-center justify-center border border-border\">\n              <div className=\"text-center mb-6\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-accent to-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-user-md text-white text-2xl\"></i>\n                </div>\n                <p className=\"font-medium text-foreground\">PharmD. Maria Rodriguez</p>\n                <p className=\"text-sm text-muted-foreground\">Licensed Pharmacist</p>\n              </div>\n              \n              <div className=\"w-full space-y-3\">\n                <Button \n                  className=\"w-full bg-accent hover:bg-accent/90\"\n                  size=\"sm\"\n                  data-testid=\"button-ask-products\"\n                >\n                  {t.askProducts}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  size=\"sm\"\n                  data-testid=\"button-get-instructions\"\n                >\n                  {t.getInstructions}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Communication Channels */}\n      <Card data-testid=\"communication-channels\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n            <i className=\"fas fa-paper-plane text-primary\"></i>\n            {t.sendFollowup}\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 items-end\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-foreground\">{t.preferredChannel}</label>\n              <select\n                value={summaryChannel}\n                onChange={(e) => setSummaryChannel(e.target.value as any)}\n                className=\"w-full px-4 py-3 rounded-lg border border-input bg-background focus:border-ring focus:ring-2 focus:ring-ring/20 transition-colors\"\n                data-testid=\"select-channel\"\n              >\n                <option value=\"sms\">{t.sms}</option>\n                <option value=\"whatsapp\">{t.whatsapp}</option>\n                <option value=\"email\">{t.emailCh}</option>\n              </select>\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-foreground\">{t.language}</label>\n              <select\n                className=\"w-full px-4 py-3 rounded-lg border border-input bg-background focus:border-ring focus:ring-2 focus:ring-ring/20 transition-colors\"\n                data-testid=\"select-language\"\n              >\n                <option value=\"en\">English</option>\n                <option value=\"de\">Deutsch</option>\n                <option value=\"ar\">العربية</option>\n              </select>\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-foreground\">{t.summaryType}</label>\n              <select\n                value={summaryType}\n                onChange={(e) => setSummaryType(e.target.value as any)}\n                className=\"w-full px-4 py-3 rounded-lg border border-input bg-background focus:border-ring focus:ring-2 focus:ring-ring/20 transition-colors\"\n                data-testid=\"select-summary-type\"\n              >\n                <option value=\"consultation\">{t.consultationSummary}</option>\n                <option value=\"product\">{t.productInfo}</option>\n                <option value=\"prescription\">{t.prescriptionDetails}</option>\n              </select>\n            </div>\n            <Button\n              className=\"bg-primary hover:bg-primary/90\"\n              onClick={() => sendSummaryMutation.mutate()}\n              disabled={!contactData.consent || sendSummaryMutation.isPending}\n              data-testid=\"button-send-summary\"\n            >\n              {sendSummaryMutation.isPending ? \"Sending...\" : t.sendSummary}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":14097},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useI18n.ts":{"content":"import { useState } from \"react\";\nimport { I18N, type LangKey } from \"@/lib/i18n\";\n\nexport function useI18n() {\n  const [lang, setLang] = useState<LangKey>(\"en\");\n  \n  const t = I18N[lang];\n  const isRtl = lang === \"ar\";\n\n  return {\n    t,\n    lang,\n    setLang,\n    isRtl\n  };\n}\n","size_bytes":280},"client/src/lib/i18n.ts":{"content":"export const I18N = {\n  en: {\n    brand: \"NextViseAI — Healthcare Demos\",\n    tabs: { th: \"Telehealth\", tp: \"Tele‑Pharmacy\" },\n    lang: \"Language\",\n    consent: \"I consent to receive demo messages (SMS/WhatsApp/Email). This is a demo and not medical advice.\",\n    name: \"Name\",\n    phone: \"Mobile number\",\n    email: \"Email\",\n    or: \"or\",\n    // Telehealth\n    thTitle: \"Try our Telehealth Agent\",\n    thSub: \"Talk to an AI assistant that books appointments, sends SMS/WhatsApp follow‑ups, and can hand off to a live doctor.\",\n    startAgent: \"Start Voice Agent\",\n    scheduleNow: \"Schedule now\",\n    avatarDemo: \"Avatar Tele‑Consultation (Demo)\",\n    transcript: \"Transcript\",\n    summary: \"Visit Summary\",\n    doctorHandoff: \"Book Doctor (e‑Prescription)\",\n    genErx: \"Generate e‑Rx (Demo)\",\n    sickNote: \"Request Sick Note (Demo)\",\n    // Tele‑Pharmacy\n    tpTitle: \"Ask the Pharmacist Avatar\",\n    tpSub: \"Get product guidance, usage instructions, and precautions. The avatar can book a follow‑up and send you a summary.\",\n    chooseProduct: \"Choose a product (demo)\",\n    add: \"Add\",\n    cart: \"Cart\",\n    qty: \"Qty\",\n    sendSummary: \"Send summary\",\n    channel: \"Channel\",\n    sms: \"SMS\",\n    whatsapp: \"WhatsApp\",\n    emailCh: \"Email\",\n    // Sick Note modal\n    snTitle: \"Sick Note (Demo)\",\n    reason: \"Reason / Symptoms\",\n    startDate: \"Start date\",\n    duration: \"Duration (days)\",\n    country: \"Country\",\n    employerEmail: \"Employer email (optional)\",\n    create: \"Create\",\n    cancel: \"Cancel\",\n    footer: \"Demo only • HIPAA/GDPR aware flow • Do not enter real PHI.\",\n    // Additional UI strings\n    contactInfo: \"Contact Information\",\n    contactDesc: \"Enter your details to access the healthcare demos\",\n    fullName: \"Your full name\",\n    phoneNumber: \"+1 (555) 000-0000\",\n    emailAddress: \"your@email.com\",\n    consentLabel: \"Healthcare Demo Consent:\",\n    consentText: \"I consent to receive demo messages (SMS/WhatsApp/Email). This is a demonstration platform and not actual medical advice. All data is handled in compliance with HIPAA/GDPR standards.\",\n    visitSummaryDesc: \"Real-time transcript and medical summary generation\",\n    generateSummary: \"Generate Summary\",\n    ePrescriptionDesc: \"Digital prescription generation and pharmacy integration\",\n    sickNoteDesc: \"Official medical certificate generation for employers\",\n    doctorHandoffTitle: \"Doctor Handoff System\",\n    doctorHandoffDesc: \"Seamless transition from AI to human healthcare providers\",\n    bookDoctor: \"Book Doctor Consultation\",\n    emergencyConsult: \"Emergency Consultation\",\n    productCatalog: \"Product Catalog (Demo)\",\n    pharmacistAvatar: \"Pharmacist Avatar\",\n    askProducts: \"Ask About Products\",\n    getInstructions: \"Get Usage Instructions\",\n    sendFollowup: \"Send Summary & Follow-up\",\n    preferredChannel: \"Preferred Channel\",\n    language: \"Language\",\n    summaryType: \"Summary Type\",\n    consultationSummary: \"Consultation Summary\",\n    productInfo: \"Product Information\",\n    prescriptionDetails: \"Prescription Details\"\n  },\n  de: {\n    brand: \"NextViseAI — Healthcare‑Demos\",\n    tabs: { th: \"Telehealth\", tp: \"Tele‑Pharmacy\" },\n    lang: \"Sprache\",\n    consent: \"Ich stimme zu, Demo‑Nachrichten (SMS/WhatsApp/E‑Mail) zu erhalten. Dies ist nur eine Demo und keine medizinische Beratung.\",\n    name: \"Name\",\n    phone: \"Handynummer\",\n    email: \"E‑Mail\",\n    or: \"oder\",\n    thTitle: \"Testen Sie unseren Telehealth‑Agenten\",\n    thSub: \"Sprechen Sie mit einem KI‑Assistenten, der Termine bucht, Follow‑ups sendet und an einen Live‑Arzt übergibt.\",\n    startAgent: \"Voice‑Agent starten\",\n    scheduleNow: \"Jetzt Termin buchen\",\n    avatarDemo: \"Avatar‑Telekonsultation (Demo)\",\n    transcript: \"Transkript\",\n    summary: \"Besuchs‑Zusammenfassung\",\n    doctorHandoff: \"Arzt buchen (E‑Rezept)\",\n    genErx: \"E‑Rezept erzeugen (Demo)\",\n    sickNote: \"Krankschreibung anfordern (Demo)\",\n    tpTitle: \"Fragen Sie den Apotheker‑Avatar\",\n    tpSub: \"Produkthinweise, Anwendung und Vorsicht. Avatar kann Follow‑ups buchen und Zusammenfassung senden.\",\n    chooseProduct: \"Produkt wählen (Demo)\",\n    add: \"Hinzufügen\",\n    cart: \"Warenkorb\",\n    qty: \"Menge\",\n    sendSummary: \"Zusammenfassung senden\",\n    channel: \"Kanal\",\n    sms: \"SMS\",\n    whatsapp: \"WhatsApp\",\n    emailCh: \"E‑Mail\",\n    snTitle: \"Krankschreibung (Demo)\",\n    reason: \"Grund / Symptome\",\n    startDate: \"Beginn\",\n    duration: \"Dauer (Tage)\",\n    country: \"Land\",\n    employerEmail: \"Arbeitgeber‑E‑Mail (optional)\",\n    create: \"Erstellen\",\n    cancel: \"Abbrechen\",\n    footer: \"Nur Demo • HIPAA/GDPR‑bewusster Ablauf • Keine echten Gesundheitsdaten eingeben.\",\n    contactInfo: \"Kontaktinformationen\",\n    contactDesc: \"Geben Sie Ihre Daten ein, um auf die Healthcare-Demos zuzugreifen\",\n    fullName: \"Ihr vollständiger Name\",\n    phoneNumber: \"+49 (0) 000 000000\",\n    emailAddress: \"ihre@email.com\",\n    consentLabel: \"Healthcare Demo Einverständnis:\",\n    consentText: \"Ich stimme zu, Demo-Nachrichten (SMS/WhatsApp/E-Mail) zu erhalten. Dies ist eine Demo-Plattform und keine echte medizinische Beratung. Alle Daten werden HIPAA/GDPR-konform behandelt.\",\n    visitSummaryDesc: \"Echtzeit-Transkript und medizinische Zusammenfassung\",\n    generateSummary: \"Zusammenfassung erstellen\",\n    ePrescriptionDesc: \"Digitale Rezepterstellung und Apothekenintegration\",\n    sickNoteDesc: \"Offizielle Krankschreibung für Arbeitgeber\",\n    doctorHandoffTitle: \"Arzt-Übergabesystem\",\n    doctorHandoffDesc: \"Nahtloser Übergang von KI zu menschlichen Gesundheitsdienstleistern\",\n    bookDoctor: \"Arzttermin buchen\",\n    emergencyConsult: \"Notfallkonsultation\",\n    productCatalog: \"Produktkatalog (Demo)\",\n    pharmacistAvatar: \"Apotheker-Avatar\",\n    askProducts: \"Nach Produkten fragen\",\n    getInstructions: \"Anwendungshinweise\",\n    sendFollowup: \"Zusammenfassung & Nachbetreuung senden\",\n    preferredChannel: \"Bevorzugter Kanal\",\n    language: \"Sprache\",\n    summaryType: \"Zusammenfassungstyp\",\n    consultationSummary: \"Beratungszusammenfassung\",\n    productInfo: \"Produktinformationen\",\n    prescriptionDetails: \"Rezeptdetails\"\n  },\n  ar: {\n    brand: \"NextViseAI — عروض تجريبية صحية\",\n    tabs: { th: \"الصحة عن بُعد\", tp: \"الصيدلة عن بُعد\" },\n    lang: \"اللغة\",\n    consent: \"أوافق على استلام رسائل تجريبية (SMS/واتساب/البريد). هذا عرض تجريبي وليس نصيحة طبية.\",\n    name: \"الاسم\",\n    phone: \"رقم الجوال\",\n    email: \"البريد الإلكتروني\",\n    or: \"أو\",\n    thTitle: \"جرّب وكيل الصحة عن بُعد\",\n    thSub: \"تحدث مع وكيل يحجز المواعيد ويرسل المتابعات ويمكنه التحويل لطبيب مباشر.\",\n    startAgent: \"بدء الوكيل الصوتي\",\n    scheduleNow: \"احجز الآن\",\n    avatarDemo: \"استشارة أفاتار (تجريبي)\",\n    transcript: \"النص الحرفي\",\n    summary: \"ملخص الزيارة\",\n    doctorHandoff: \"حجز طبيب (وصفة إلكترونية)\",\n    genErx: \"إنشاء وصفة إلكترونية (تجريبي)\",\n    sickNote: \"طلب إجازة مرضية (تجريبي)\",\n    tpTitle: \"اسأل أفاتار الصيدلي\",\n    tpSub: \"إرشادات المنتج والاستخدام والاحتياطات. يمكنه حجز المتابعة وإرسال ملخص.\",\n    chooseProduct: \"اختر منتجًا (تجريبي)\",\n    add: \"إضافة\",\n    cart: \"السلة\",\n    qty: \"الكمية\",\n    sendSummary: \"إرسال الملخص\",\n    channel: \"القناة\",\n    sms: \"SMS\",\n    whatsapp: \"واتساب\",\n    emailCh: \"البريد\",\n    snTitle: \"إجازة مرضية (تجريبي)\",\n    reason: \"السبب/الأعراض\",\n    startDate: \"تاريخ البدء\",\n    duration: \"المدة (أيام)\",\n    country: \"الدولة\",\n    employerEmail: \"بريد صاحب العمل (اختياري)\",\n    create: \"إنشاء\",\n    cancel: \"إلغاء\",\n    footer: \"عرض تجريبي فقط • مراعاة HIPAA/GDPR • تجنب إدخال بيانات صحية حقيقية.\",\n    contactInfo: \"معلومات الاتصال\",\n    contactDesc: \"أدخل بياناتك للوصول إلى العروض التجريبية الصحية\",\n    fullName: \"اسمك الكامل\",\n    phoneNumber: \"+966 5X XXX XXXX\",\n    emailAddress: \"بريدك@الإلكتروني.com\",\n    consentLabel: \"موافقة العرض التجريبي الصحي:\",\n    consentText: \"أوافق على استلام رسائل تجريبية (SMS/واتساب/البريد الإلكتروني). هذه منصة عرض تجريبي وليست استشارة طبية فعلية. جميع البيانات تتم معالجتها وفقاً لمعايير HIPAA/GDPR.\",\n    visitSummaryDesc: \"نسخة فورية وملخص طبي في الوقت الفعلي\",\n    generateSummary: \"إنشاء الملخص\",\n    ePrescriptionDesc: \"إنشاء وصفة رقمية وتكامل مع الصيدلية\",\n    sickNoteDesc: \"إنشاء شهادة طبية رسمية لأصحاب العمل\",\n    doctorHandoffTitle: \"نظام التحويل للطبيب\",\n    doctorHandoffDesc: \"انتقال سلس من الذكاء الاصطناعي إلى مقدمي الرعاية الصحية البشرية\",\n    bookDoctor: \"حجز استشارة طبيب\",\n    emergencyConsult: \"استشارة طارئة\",\n    productCatalog: \"كتالوج المنتجات (تجريبي)\",\n    pharmacistAvatar: \"أفاتار الصيدلي\",\n    askProducts: \"اسأل عن المنتجات\",\n    getInstructions: \"احصل على تعليمات الاستخدام\",\n    sendFollowup: \"إرسال الملخص والمتابعة\",\n    preferredChannel: \"القناة المفضلة\",\n    language: \"اللغة\",\n    summaryType: \"نوع الملخص\",\n    consultationSummary: \"ملخص الاستشارة\",\n    productInfo: \"معلومات المنتج\",\n    prescriptionDetails: \"تفاصيل الوصفة\"\n  },\n} as const;\n\nexport type LangKey = keyof typeof I18N;\n\nexport const DEMO_PRODUCTS = [\n  { id: \"pain_relief\", name: { en: \"Pain Relief (ibuprofen 200mg)\", de: \"Schmerzmittel (Ibuprofen 200mg)\", ar: \"مسكن ألم (إيبوبروفين 200 ملغ)\" } },\n  { id: \"allergy\", name: { en: \"Allergy (cetirizine 10mg)\", de: \"Allergie (Cetirizin 10mg)\", ar: \"حساسية (سيتريزين 10 ملغ)\" } },\n  { id: \"cough\", name: { en: \"Cough Syrup (dextromethorphan)\", de: \"Hustensaft (Dextromethorphan)\", ar: \"شراب سعال (ديكستروميثورفان)\" } },\n  { id: \"vitamin_d\", name: { en: \"Vitamin D3 (1000 IU)\", de: \"Vitamin D3 (1000 IE)\", ar: \"فيتامين د3 (1000 وحدة)\" } },\n];\n","size_bytes":10802},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useI18n } from \"@/hooks/useI18n\";\nimport ContactForm from \"@/components/ContactForm\";\nimport ServiceTabs from \"@/components/ServiceTabs\";\nimport TelehealthSection from \"@/components/TelehealthSection\";\nimport TelepharmacySection from \"@/components/TelepharmacySection\";\nimport SickNoteModal from \"@/components/SickNoteModal\";\n\nexport default function Home() {\n  const { t, lang, setLang, isRtl } = useI18n();\n  const [activeTab, setActiveTab] = useState<\"telehealth\" | \"telepharmacy\">(\"telehealth\");\n  const [sickNoteModalOpen, setSickNoteModalOpen] = useState(false);\n  \n  // Contact form state\n  const [contactData, setContactData] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\",\n    consent: false\n  });\n\n  return (\n    <div className={`min-h-screen bg-background text-foreground ${isRtl ? 'rtl' : ''}`}>\n      {/* Header */}\n      <header className=\"bg-card border-b border-border sticky top-0 z-50 backdrop-blur-sm bg-card/95\" data-testid=\"header\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4 flex flex-col md:flex-row gap-4 md:items-center md:justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-heartbeat text-primary-foreground text-xl\"></i>\n            </div>\n            <h1 className=\"font-bold text-xl text-foreground\" data-testid=\"brand-title\">\n              {t.brand}\n            </h1>\n          </div>\n          \n          {/* Navigation & Language Selector */}\n          <div className=\"flex items-center gap-4\">\n            {/* Health Assessment Link */}\n            <Link href=\"/health-assessment\">\n              <button \n                className=\"flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors font-medium\"\n                data-testid=\"nav-health-assessment\"\n              >\n                <i className=\"fas fa-brain\"></i>\n                AI Health Assessment\n              </button>\n            </Link>\n            \n            {/* Language Selector */}\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground\">{t.lang}:</span>\n              <div className=\"flex gap-1\">\n                {([\"en\", \"de\", \"ar\"] as const).map((langCode) => (\n                  <button\n                    key={langCode}\n                    onClick={() => setLang(langCode)}\n                    className={`px-3 py-1.5 rounded-md border-2 font-medium text-sm transition-colors ${\n                      lang === langCode\n                        ? \"border-primary bg-primary text-primary-foreground\"\n                        : \"border-border bg-background hover:bg-muted\"\n                    }`}\n                    data-testid={`language-${langCode}`}\n                  >\n                    {langCode.toUpperCase()}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Contact Form */}\n        <ContactForm\n          contactData={contactData}\n          setContactData={setContactData}\n          t={t}\n        />\n\n        {/* Service Tabs */}\n        <ServiceTabs\n          activeTab={activeTab}\n          setActiveTab={setActiveTab}\n          t={t}\n        />\n\n        {/* Service Sections */}\n        {activeTab === \"telehealth\" ? (\n          <TelehealthSection\n            contactData={contactData}\n            t={t}\n            onOpenSickNote={() => setSickNoteModalOpen(true)}\n          />\n        ) : (\n          <TelepharmacySection\n            contactData={contactData}\n            t={t}\n          />\n        )}\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-8 mt-12\">\n        <div className=\"max-w-7xl mx-auto px-4 text-center\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <i className=\"fas fa-shield-alt text-primary\"></i>\n            <span className=\"font-medium text-foreground\">HIPAA/GDPR Compliant Demo Platform</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground max-w-2xl mx-auto\">\n            {t.footer}\n          </p>\n          <div className=\"flex justify-center gap-6 mt-6 text-sm text-muted-foreground\">\n            <span>• Demo Only</span>\n            <span>• Privacy Aware</span>\n            <span>• No Real Medical Advice</span>\n          </div>\n        </div>\n      </footer>\n\n      {/* Sick Note Modal */}\n      <SickNoteModal\n        isOpen={sickNoteModalOpen}\n        onClose={() => setSickNoteModalOpen(false)}\n        contactData={contactData}\n        t={t}\n      />\n    </div>\n  );\n}\n","size_bytes":4850},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/scripts/seed-db.ts":{"content":"#!/usr/bin/env tsx\n\nimport { seedPharmacyData } from \"../seeds/pharmacy-data\";\n\nasync function runSeeding() {\n  try {\n    console.log(\"🚀 Starting database seeding...\");\n    await seedPharmacyData();\n    console.log(\"✅ Database seeding completed successfully!\");\n    process.exit(0);\n  } catch (error) {\n    console.error(\"❌ Database seeding failed:\", error);\n    process.exit(1);\n  }\n}\n\nrunSeeding();","size_bytes":407},"server/seeds/pharmacy-data.ts":{"content":"import { storage } from \"../storage\";\nimport { type InsertPharmacyCategory, type InsertPharmacyProduct } from \"@shared/schema\";\n\nconst pharmacyCategories: InsertPharmacyCategory[] = [\n  {\n    name: \"Pain Relief\",\n    nameDE: \"Schmerzlinderung\",\n    nameAR: \"تسكين الألم\",\n    description: \"Over-the-counter pain management medications\",\n    descriptionDE: \"Rezeptfreie Schmerzmittel\",\n    descriptionAR: \"أدوية إدارة الألم المتاحة بدون وصفة طبية\",\n    icon: \"🩹\",\n    sortOrder: 1,\n    isActive: true,\n  },\n  {\n    name: \"Allergy\",\n    nameDE: \"Allergie\",\n    nameAR: \"الحساسية\",\n    description: \"Allergy relief and antihistamine medications\",\n    descriptionDE: \"Allergielinderung und Antihistaminika\",\n    descriptionAR: \"أدوية تخفيف الحساسية ومضادات الهيستامين\",\n    icon: \"🤧\",\n    sortOrder: 2,\n    isActive: true,\n  },\n  {\n    name: \"Cold & Flu\",\n    nameDE: \"Erkältung & Grippe\",\n    nameAR: \"نزلات البرد والإنفلونزا\",\n    description: \"Cold and flu symptom relief\",\n    descriptionDE: \"Erkältungs- und Grippesymptom-Linderung\",\n    descriptionAR: \"تخفيف أعراض نزلات البرد والإنفلونزا\",\n    icon: \"🤒\",\n    sortOrder: 3,\n    isActive: true,\n  },\n  {\n    name: \"Digestive Health\",\n    nameDE: \"Verdauungsgesundheit\",\n    nameAR: \"صحة الجهاز الهضمي\",\n    description: \"Digestive health and stomach medications\",\n    descriptionDE: \"Verdauungsgesundheit und Magenmedikamente\",\n    descriptionAR: \"أدوية صحة الجهاز الهضمي والمعدة\",\n    icon: \"💊\",\n    sortOrder: 4,\n    isActive: true,\n  },\n  {\n    name: \"Vitamins & Supplements\",\n    nameDE: \"Vitamine & Nahrungsergänzungsmittel\",\n    nameAR: \"الفيتامينات والمكملات\",\n    description: \"Essential vitamins and nutritional supplements\",\n    descriptionDE: \"Essentielle Vitamine und Nahrungsergänzungsmittel\",\n    descriptionAR: \"الفيتامينات الأساسية والمكملات الغذائية\",\n    icon: \"🌿\",\n    sortOrder: 5,\n    isActive: true,\n  },\n  {\n    name: \"First Aid\",\n    nameDE: \"Erste Hilfe\",\n    nameAR: \"الإسعافات الأولية\",\n    description: \"First aid supplies and wound care\",\n    descriptionDE: \"Erste-Hilfe-Materialien und Wundversorgung\",\n    descriptionAR: \"مستلزمات الإسعافات الأولية ورعاية الجروح\",\n    icon: \"🚑\",\n    sortOrder: 6,\n    isActive: true,\n  },\n];\n\nexport async function seedPharmacyData() {\n  console.log(\"🌱 Seeding pharmacy data...\");\n\n  // Create categories and store them with their IDs\n  const createdCategories: Record<string, string> = {};\n  \n  for (const categoryData of pharmacyCategories) {\n    try {\n      const category = await storage.createPharmacyCategory(categoryData);\n      createdCategories[categoryData.name] = category.id;\n      console.log(`✓ Created category: ${categoryData.name}`);\n    } catch (error) {\n      console.log(`Category ${categoryData.name} might already exist`);\n    }\n  }\n\n  // Get existing categories if creation failed (already exist)\n  const existingCategories = await storage.getPharmacyCategories();\n  for (const cat of existingCategories) {\n    createdCategories[cat.name] = cat.id;\n  }\n\n  const pharmacyProducts: Omit<InsertPharmacyProduct, 'categoryId'>[] = [\n    // Pain Relief Products\n    {\n      name: \"Ibuprofen 200mg\",\n      nameDE: \"Ibuprofen 200mg\",\n      nameAR: \"إيبوبروفين 200 مجم\",\n      description: \"Fast-acting pain relief for headaches, muscle pain, and inflammation\",\n      descriptionDE: \"Schnell wirkende Schmerzlinderung bei Kopfschmerzen, Muskelschmerzen und Entzündungen\",\n      descriptionAR: \"تسكين سريع المفعول للصداع وآلام العضلات والالتهابات\",\n      activeIngredient: \"Ibuprofen\",\n      dosage: \"200mg\",\n      formulation: \"tablet\",\n      manufacturer: \"Generic Pharma\",\n      price: \"8.99\",\n      currency: \"USD\",\n      stockQuantity: 150,\n      minStockLevel: 20,\n      requiresPrescription: false,\n      ageRestriction: 12,\n      contraindications: [\"Stomach ulcers\", \"Kidney disease\", \"Severe heart disease\"],\n      sideEffects: [\"Stomach upset\", \"Dizziness\", \"Headache\"],\n      interactions: [\"Warfarin\", \"ACE inhibitors\", \"Lithium\"],\n      storageInstructions: \"Store below 25°C in a dry place\",\n      barcode: \"123456789001\",\n      isActive: true,\n    },\n    {\n      name: \"Acetaminophen 500mg\",\n      nameDE: \"Paracetamol 500mg\",\n      nameAR: \"أسيتامينوفين 500 مجم\",\n      description: \"Gentle pain relief and fever reducer\",\n      descriptionDE: \"Sanfte Schmerzlinderung und Fiebersenker\",\n      descriptionAR: \"تسكين لطيف للألم وخافض للحرارة\",\n      activeIngredient: \"Acetaminophen\",\n      dosage: \"500mg\",\n      formulation: \"tablet\",\n      manufacturer: \"HealthCorp\",\n      price: \"6.49\",\n      currency: \"USD\",\n      stockQuantity: 200,\n      minStockLevel: 25,\n      requiresPrescription: false,\n      contraindications: [\"Severe liver disease\"],\n      sideEffects: [\"Rare allergic reactions\"],\n      interactions: [\"Warfarin\"],\n      storageInstructions: \"Store below 30°C\",\n      barcode: \"123456789002\",\n      isActive: true,\n    },\n    // Allergy Products\n    {\n      name: \"Cetirizine 10mg\",\n      nameDE: \"Cetirizin 10mg\",\n      nameAR: \"سيتيريزين 10 مجم\",\n      description: \"24-hour allergy relief for hay fever and hives\",\n      descriptionDE: \"24-Stunden-Allergielinderung bei Heuschnupfen und Nesselsucht\",\n      descriptionAR: \"تخفيف الحساسية لمدة 24 ساعة لحمى القش والشرى\",\n      activeIngredient: \"Cetirizine HCl\",\n      dosage: \"10mg\",\n      formulation: \"tablet\",\n      manufacturer: \"AllergyMed\",\n      price: \"12.99\",\n      currency: \"USD\",\n      stockQuantity: 100,\n      minStockLevel: 15,\n      requiresPrescription: false,\n      ageRestriction: 6,\n      contraindications: [\"Severe kidney disease\"],\n      sideEffects: [\"Drowsiness\", \"Dry mouth\", \"Fatigue\"],\n      interactions: [\"CNS depressants\"],\n      storageInstructions: \"Store below 25°C\",\n      barcode: \"123456789003\",\n      isActive: true,\n    },\n    {\n      name: \"Loratadine 10mg\",\n      nameDE: \"Loratadin 10mg\",\n      nameAR: \"لوراتادين 10 مجم\",\n      description: \"Non-drowsy allergy relief for seasonal allergies\",\n      descriptionDE: \"Nicht-müde machende Allergielinderung für saisonale Allergien\",\n      descriptionAR: \"تخفيف الحساسية بدون نعاس للحساسية الموسمية\",\n      activeIngredient: \"Loratadine\",\n      dosage: \"10mg\",\n      formulation: \"tablet\",\n      manufacturer: \"ClearAir Pharma\",\n      price: \"9.99\",\n      currency: \"USD\",\n      stockQuantity: 80,\n      minStockLevel: 12,\n      requiresPrescription: false,\n      ageRestriction: 2,\n      sideEffects: [\"Headache\", \"Nervousness\"],\n      interactions: [],\n      storageInstructions: \"Store in original container below 30°C\",\n      barcode: \"123456789004\",\n      isActive: true,\n    },\n    // Cold & Flu Products\n    {\n      name: \"Dextromethorphan Cough Syrup\",\n      nameDE: \"Dextromethorphan Hustensaft\",\n      nameAR: \"شراب الكحة ديكستروميثورفان\",\n      description: \"Effective cough suppressant for dry coughs\",\n      descriptionDE: \"Wirksamer Hustenstiller für trockenen Husten\",\n      descriptionAR: \"مثبط فعال للسعال الجاف\",\n      activeIngredient: \"Dextromethorphan HBr\",\n      dosage: \"15mg/5ml\",\n      formulation: \"liquid\",\n      manufacturer: \"CoughCare\",\n      price: \"7.99\",\n      currency: \"USD\",\n      stockQuantity: 60,\n      minStockLevel: 10,\n      requiresPrescription: false,\n      ageRestriction: 4,\n      contraindications: [\"MAOI use within 14 days\"],\n      sideEffects: [\"Dizziness\", \"Nausea\"],\n      interactions: [\"MAOIs\", \"SSRIs\"],\n      storageInstructions: \"Store upright below 25°C\",\n      barcode: \"123456789005\",\n      isActive: true,\n    },\n    // Digestive Health\n    {\n      name: \"Antacid Tablets\",\n      nameDE: \"Antazida-Tabletten\",\n      nameAR: \"أقراص مضادة للحموضة\",\n      description: \"Fast relief from heartburn and acid indigestion\",\n      descriptionDE: \"Schnelle Linderung von Sodbrennen und Magenverstimmung\",\n      descriptionAR: \"تخفيف سريع من حرقة المعدة وعسر الهضم الحمضي\",\n      activeIngredient: \"Calcium Carbonate\",\n      dosage: \"500mg\",\n      formulation: \"tablet\",\n      manufacturer: \"DigestWell\",\n      price: \"5.49\",\n      currency: \"USD\",\n      stockQuantity: 120,\n      minStockLevel: 20,\n      requiresPrescription: false,\n      contraindications: [\"Kidney stones\", \"High calcium levels\"],\n      sideEffects: [\"Constipation\", \"Gas\"],\n      interactions: [\"Iron supplements\", \"Antibiotics\"],\n      storageInstructions: \"Store in dry place below 30°C\",\n      barcode: \"123456789006\",\n      isActive: true,\n    },\n    // Vitamins & Supplements\n    {\n      name: \"Vitamin D3 1000 IU\",\n      nameDE: \"Vitamin D3 1000 IE\",\n      nameAR: \"فيتامين د3 1000 وحدة دولية\",\n      description: \"Essential vitamin for bone health and immune support\",\n      descriptionDE: \"Essentielles Vitamin für Knochengesundheit und Immununterstützung\",\n      descriptionAR: \"فيتامين أساسي لصحة العظام ودعم المناعة\",\n      activeIngredient: \"Cholecalciferol\",\n      dosage: \"1000 IU\",\n      formulation: \"capsule\",\n      manufacturer: \"VitaHealth\",\n      price: \"14.99\",\n      currency: \"USD\",\n      stockQuantity: 90,\n      minStockLevel: 15,\n      requiresPrescription: false,\n      sideEffects: [\"Rare: hypercalcemia with excessive use\"],\n      interactions: [\"Thiazide diuretics\"],\n      storageInstructions: \"Store in cool, dry place\",\n      barcode: \"123456789007\",\n      isActive: true,\n    },\n    // First Aid\n    {\n      name: \"Adhesive Bandages (Mixed Sizes)\",\n      nameDE: \"Selbstklebende Verbände (Verschiedene Größen)\",\n      nameAR: \"ضمادات لاصقة (أحجام مختلطة)\",\n      description: \"Sterile adhesive bandages for minor cuts and scrapes\",\n      descriptionDE: \"Sterile selbstklebende Verbände für kleine Schnitte und Schürfwunden\",\n      descriptionAR: \"ضمادات لاصقة معقمة للجروح والخدوش الطفيفة\",\n      activeIngredient: \"N/A\",\n      dosage: \"N/A\",\n      formulation: \"bandage\",\n      manufacturer: \"FirstAid Pro\",\n      price: \"3.99\",\n      currency: \"USD\",\n      stockQuantity: 200,\n      minStockLevel: 30,\n      requiresPrescription: false,\n      contraindications: [\"Adhesive allergies\"],\n      storageInstructions: \"Store in dry place\",\n      barcode: \"123456789008\",\n      isActive: true,\n    },\n  ];\n\n  // Create products with category associations\n  for (const productData of pharmacyProducts) {\n    let categoryName = \"\";\n    \n    // Determine category based on product name/type\n    if (productData.name.includes(\"Ibuprofen\") || productData.name.includes(\"Acetaminophen\")) {\n      categoryName = \"Pain Relief\";\n    } else if (productData.name.includes(\"Cetirizine\") || productData.name.includes(\"Loratadine\")) {\n      categoryName = \"Allergy\";\n    } else if (productData.name.includes(\"Dextromethorphan\") || productData.name.includes(\"Cough\")) {\n      categoryName = \"Cold & Flu\";\n    } else if (productData.name.includes(\"Antacid\")) {\n      categoryName = \"Digestive Health\";\n    } else if (productData.name.includes(\"Vitamin\")) {\n      categoryName = \"Vitamins & Supplements\";\n    } else if (productData.name.includes(\"Bandages\")) {\n      categoryName = \"First Aid\";\n    }\n\n    const categoryId = createdCategories[categoryName];\n    if (!categoryId) {\n      console.log(`❌ Category not found for product: ${productData.name}`);\n      continue;\n    }\n\n    try {\n      const product = await storage.createPharmacyProduct({\n        ...productData,\n        categoryId,\n      });\n      console.log(`✓ Created product: ${productData.name}`);\n    } catch (error) {\n      console.log(`Product ${productData.name} might already exist`);\n    }\n  }\n\n  console.log(\"🎉 Pharmacy data seeding completed!\");\n}","size_bytes":12203},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { storage } from '../storage';\n\ninterface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    username: string;\n  };\n  patient?: {\n    id: string;\n    userId: string;\n  };\n}\n\nexport async function requireAuth(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    // For demo purposes, we'll use a simple header-based auth\n    // In production, this would be JWT/session-based authentication\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ \n        error: 'Authentication required',\n        message: 'Please provide valid authentication token'\n      });\n    }\n\n    const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n    \n    // For demo mode, accept a special demo token\n    if (token === 'demo-token') {\n      req.user = {\n        id: 'demo-user-id',\n        username: 'demo-user'\n      };\n      return next();\n    }\n\n    // In production, verify JWT token here\n    // For now, we'll simulate token validation\n    if (token.length < 10) {\n      return res.status(401).json({ \n        error: 'Invalid authentication token',\n        message: 'Token must be at least 10 characters'\n      });\n    }\n\n    // Simulate user lookup (in production, decode JWT and get user)\n    req.user = {\n      id: `user-${token.substring(0, 8)}`,\n      username: `user-${token.substring(0, 8)}`\n    };\n\n    next();\n  } catch (error) {\n    console.error('Authentication error:', error);\n    res.status(500).json({ error: 'Authentication service error' });\n  }\n}\n\nexport async function validatePatientAccess(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    // Get patientId from URL params or request body\n    const patientId = req.params.patientId || req.body.patientId;\n    \n    if (!patientId) {\n      return res.status(400).json({ \n        error: 'Patient ID required',\n        message: 'Patient ID must be provided in request'\n      });\n    }\n\n    // For demo mode, allow access to demo patient\n    if (req.user.id === 'demo-user-id' && patientId === 'demo-patient-id') {\n      req.patient = {\n        id: 'demo-patient-id',\n        userId: 'demo-user-id'\n      };\n      return next();\n    }\n\n    // Verify the patient belongs to the authenticated user\n    const patient = await storage.getPatient(patientId);\n    if (!patient) {\n      return res.status(404).json({ \n        error: 'Patient not found',\n        message: 'The specified patient does not exist'\n      });\n    }\n\n    // Check if the patient belongs to the authenticated user\n    if (patient.userId !== req.user.id) {\n      return res.status(403).json({ \n        error: 'Access denied',\n        message: 'You do not have permission to access this patient\\'s data'\n      });\n    }\n\n    req.patient = {\n      id: patient.id,\n      userId: patient.userId || req.user.id\n    };\n    next();\n  } catch (error) {\n    console.error('Patient access validation error:', error);\n    res.status(500).json({ error: 'Access validation service error' });\n  }\n}\n\nexport { AuthenticatedRequest };","size_bytes":3274},"server/services/securityService.ts":{"content":"import bcrypt from 'bcrypt';\nimport crypto from 'crypto';\n\nclass SecurityService {\n  private readonly saltRounds = 12;\n  private readonly algorithm = 'aes-256-gcm';\n  private readonly encryptionKey: string;\n\n  constructor() {\n    // Get encryption key from environment or generate a default for demo\n    this.encryptionKey = process.env.ENCRYPTION_KEY || this.generateDefaultKey();\n    \n    if (!process.env.ENCRYPTION_KEY) {\n      console.warn(\"⚠️  Using default encryption key for demo. Set ENCRYPTION_KEY in production!\");\n    }\n  }\n\n  private generateDefaultKey(): string {\n    // Generate a demo key - in production this should come from secure key management\n    return crypto.scryptSync('nextviseai-demo-key', 'salt', 32).toString('hex');\n  }\n\n  private getKeyBuffer(): Buffer {\n    return Buffer.from(this.encryptionKey, 'hex');\n  }\n\n  // Password hashing methods\n  async hashPassword(password: string): Promise<string> {\n    try {\n      const hash = await bcrypt.hash(password, this.saltRounds);\n      return hash;\n    } catch (error) {\n      console.error('Error hashing password:', error);\n      throw new Error('Failed to hash password');\n    }\n  }\n\n  async verifyPassword(password: string, hash: string): Promise<boolean> {\n    try {\n      const isValid = await bcrypt.compare(password, hash);\n      return isValid;\n    } catch (error) {\n      console.error('Error verifying password:', error);\n      throw new Error('Failed to verify password');\n    }\n  }\n\n  // Medical record encryption methods\n  encryptMedicalData(data: string): string {\n    try {\n      if (!data || data.trim() === '') {\n        return data; // Don't encrypt empty data\n      }\n\n      const iv = crypto.randomBytes(12); // 12 bytes for AES-GCM\n      const cipher = crypto.createCipheriv(this.algorithm, this.getKeyBuffer(), iv);\n      cipher.setAAD(Buffer.from('medical-record', 'utf8'));\n      \n      let encrypted = cipher.update(data, 'utf8', 'hex');\n      encrypted += cipher.final('hex');\n      \n      const authTag = cipher.getAuthTag();\n      \n      // Combine IV, auth tag, and encrypted data\n      return `${iv.toString('hex')}:${authTag.toString('hex')}:${encrypted}`;\n    } catch (error) {\n      console.error('Error encrypting medical data:', error);\n      throw new Error('Failed to encrypt medical data');\n    }\n  }\n\n  decryptMedicalData(encryptedData: string): string {\n    try {\n      if (!encryptedData || encryptedData.trim() === '') {\n        return encryptedData; // Return empty data as-is\n      }\n\n      // Check if data is already decrypted (for backward compatibility)\n      if (!encryptedData.includes(':')) {\n        return encryptedData; // Return unencrypted data as-is\n      }\n\n      const parts = encryptedData.split(':');\n      if (parts.length !== 3) {\n        throw new Error('Invalid encrypted data format');\n      }\n\n      const [ivHex, authTagHex, encrypted] = parts;\n      const iv = Buffer.from(ivHex, 'hex');\n      const authTag = Buffer.from(authTagHex, 'hex');\n      \n      const decipher = crypto.createDecipheriv(this.algorithm, this.getKeyBuffer(), iv);\n      decipher.setAAD(Buffer.from('medical-record', 'utf8'));\n      decipher.setAuthTag(authTag);\n      \n      let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n      decrypted += decipher.final('utf8');\n      \n      return decrypted;\n    } catch (error) {\n      console.error('Error decrypting medical data:', error);\n      // Return the original data if decryption fails (for backward compatibility)\n      return encryptedData;\n    }\n  }\n\n  // Utility method to encrypt sensitive patient information\n  encryptSensitiveField(data: string | null | undefined): string | null {\n    if (!data) return null;\n    return this.encryptMedicalData(data);\n  }\n\n  // Utility method to decrypt sensitive patient information\n  decryptSensitiveField(encryptedData: string | null | undefined): string | null {\n    if (!encryptedData) return null;\n    return this.decryptMedicalData(encryptedData);\n  }\n\n  // Generate secure random tokens (for session tokens, etc.)\n  generateSecureToken(length: number = 32): string {\n    return crypto.randomBytes(length).toString('hex');\n  }\n\n  // Hash sensitive data for searching (one-way)\n  hashForSearch(data: string): string {\n    return crypto.createHash('sha256').update(data).digest('hex');\n  }\n}\n\nexport const securityService = new SecurityService();","size_bytes":4375},"server/services/voiceAgentService.ts":{"content":"import OpenAI from 'openai';\nimport { storage } from '../storage';\nimport { securityService } from './securityService';\n\ninterface VoiceAgentConfig {\n  patientId?: string;\n  language?: string;\n  consultationType?: 'telehealth' | 'telepharmacy';\n}\n\ninterface ConversationMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n  timestamp?: Date;\n}\n\ninterface VoiceAgentResponse {\n  textResponse: string;\n  audioUrl?: string;\n  actions?: {\n    type: 'appointment_request' | 'consultation_request' | 'pharmacy_inquiry';\n    data: any;\n  }[];\n  conversationId?: string;\n}\n\nclass VoiceAgentService {\n  private openai: OpenAI;\n  private readonly systemPrompts = {\n    telehealth: `You are NextViseAI's helpful telehealth assistant. You help patients schedule appointments, understand their symptoms, and guide them through healthcare services. \n\nKey capabilities:\n- Schedule telehealth appointments\n- Provide basic health information\n- Guide users through the consultation process\n- Collect patient symptoms and concerns\n- Explain next steps in their care\n\nGuidelines:\n- Be empathetic and professional\n- Ask clarifying questions about symptoms\n- Suggest appropriate appointment types\n- Always remind patients this is for guidance only, not medical diagnosis\n- Keep responses concise and clear\n- If urgent symptoms, recommend immediate medical attention`,\n\n    telepharmacy: `You are NextViseAI's helpful telepharmacy assistant. You help patients with medication questions, pharmacy services, and prescription management.\n\nKey capabilities:\n- Answer medication questions\n- Help with prescription refills\n- Explain drug interactions and side effects\n- Guide users through pharmacy services\n- Provide medication adherence support\n\nGuidelines:\n- Be knowledgeable about medications\n- Ask about allergies and current medications\n- Explain medication instructions clearly\n- Recommend consulting pharmacist for complex questions\n- Keep responses professional and informative\n- Always remind this is for guidance only, not medical advice`\n  };\n\n  constructor() {\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (!apiKey) {\n      console.warn(\"⚠️  No OpenAI API key found. Voice agent will use demo mode.\");\n    }\n    \n    this.openai = new OpenAI({\n      apiKey: apiKey || 'demo-key'\n    });\n  }\n\n  async transcribeAudio(audioBuffer: Buffer, config: VoiceAgentConfig = {}): Promise<string> {\n    try {\n      if (!process.env.OPENAI_API_KEY) {\n        // Demo mode - return simulated transcription\n        if (process.env.NODE_ENV !== 'production') {\n          console.log(\"VOICE DEMO: Would transcribe audio buffer\");\n        }\n        return \"Hello, I would like to schedule an appointment for a general consultation.\";\n      }\n\n      // Use OpenAI's toFile utility for proper file handling\n      const tempFile = await this.openai.toFile(audioBuffer, 'audio.webm');\n      \n      const response = await this.openai.audio.transcriptions.create({\n        file: tempFile,\n        model: 'whisper-1',\n        language: config.language || 'en',\n        response_format: 'text'\n      });\n\n      return response;\n    } catch (error) {\n      console.error('Error transcribing audio:', error);\n      // Fall back to demo mode\n      if (process.env.NODE_ENV !== 'production') {\n        console.log(\"VOICE DEMO (fallback): Audio transcription failed, using demo response\");\n      }\n      return \"I'm having trouble with my audio, but I'd like to schedule a consultation.\";\n    }\n  }\n\n  async generateTextToSpeech(text: string, config: VoiceAgentConfig = {}): Promise<Buffer | null> {\n    try {\n      if (!process.env.OPENAI_API_KEY) {\n        // Demo mode - return null (no audio generated)\n        if (process.env.NODE_ENV !== 'production') {\n          console.log(\"VOICE DEMO: Would generate TTS for:\", text.substring(0, 50) + '...');\n        }\n        return null;\n      }\n\n      const response = await this.openai.audio.speech.create({\n        model: 'tts-1',\n        voice: 'alloy',\n        input: text,\n        response_format: 'mp3'\n      });\n\n      const buffer = Buffer.from(await response.arrayBuffer());\n      return buffer;\n    } catch (error) {\n      console.error('Error generating text-to-speech:', error);\n      if (process.env.NODE_ENV !== 'production') {\n        console.log(\"VOICE DEMO (fallback): TTS generation failed\");\n      }\n      return null;\n    }\n  }\n\n  async processVoiceInput(\n    transcribedText: string, \n    conversationHistory: ConversationMessage[],\n    config: VoiceAgentConfig = {}\n  ): Promise<VoiceAgentResponse> {\n    try {\n      const consultationType = config.consultationType || 'telehealth';\n      const systemPrompt = this.systemPrompts[consultationType];\n\n      if (!process.env.OPENAI_API_KEY) {\n        // Demo mode response\n        const demoResponse = this.generateDemoResponse(transcribedText, consultationType);\n        if (process.env.NODE_ENV !== 'production') {\n          console.log(\"VOICE DEMO: Generated response:\", demoResponse.textResponse.substring(0, 50) + '...');\n        }\n        return demoResponse;\n      }\n\n      // Build conversation context\n      const messages: any[] = [\n        { role: 'system', content: systemPrompt },\n        ...conversationHistory.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        })),\n        { role: 'user', content: transcribedText }\n      ];\n\n      const completion = await this.openai.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages,\n        max_tokens: 300,\n        temperature: 0.7,\n        tools: [\n          {\n            type: 'function',\n            function: {\n              name: 'schedule_appointment',\n              description: 'Schedule a healthcare appointment',\n              parameters: {\n                type: 'object',\n                properties: {\n                  type: { type: 'string', enum: ['telehealth', 'telepharmacy'] },\n                  reason: { type: 'string' },\n                  urgency: { type: 'string', enum: ['routine', 'urgent', 'emergency'] },\n                  preferredTime: { type: 'string' }\n                },\n                required: ['type', 'reason']\n              }\n            }\n          }\n        ],\n        tool_choice: 'auto'\n      });\n\n      const assistantMessage = completion.choices[0].message;\n      let actions: any[] = [];\n\n      // Check if tool was called\n      if (assistantMessage.tool_calls && assistantMessage.tool_calls.length > 0) {\n        for (const toolCall of assistantMessage.tool_calls) {\n          if (toolCall.type === 'function' && toolCall.function.name === 'schedule_appointment') {\n            const functionData = JSON.parse(toolCall.function.arguments);\n            actions.push({\n              type: 'appointment_request',\n              data: functionData\n            });\n          }\n        }\n      }\n\n      const textResponse = assistantMessage.content || \"I understand. How else can I help you?\";\n      \n      return {\n        textResponse,\n        actions,\n        conversationId: securityService.generateSecureToken()\n      };\n\n    } catch (error) {\n      console.error('Error processing voice input:', error);\n      \n      // Fallback to demo mode\n      const demoResponse = this.generateDemoResponse(transcribedText, config.consultationType || 'telehealth');\n      if (process.env.NODE_ENV !== 'production') {\n        console.log(\"VOICE DEMO (fallback): API failed, using demo response\");\n      }\n      return demoResponse;\n    }\n  }\n\n  private generateDemoResponse(input: string, consultationType: string): VoiceAgentResponse {\n    const lowerInput = input.toLowerCase();\n    \n    // Detect appointment scheduling intent\n    if (lowerInput.includes('appointment') || lowerInput.includes('schedule') || lowerInput.includes('book')) {\n      return {\n        textResponse: `I'd be happy to help you schedule a ${consultationType} appointment. I can see you're interested in booking a consultation. Let me connect you with our scheduling system to find an available time that works for you.`,\n        actions: [{\n          type: 'appointment_request',\n          data: {\n            type: consultationType,\n            reason: 'General consultation',\n            urgency: 'routine'\n          }\n        }],\n        conversationId: securityService.generateSecureToken()\n      };\n    }\n\n    // Detect symptom discussion\n    if (lowerInput.includes('pain') || lowerInput.includes('hurt') || lowerInput.includes('feel') || lowerInput.includes('symptom')) {\n      return {\n        textResponse: \"I understand you're experiencing some symptoms. While I can provide general information, it's important to speak with a healthcare provider for proper evaluation. Would you like me to help you schedule a consultation?\",\n        actions: [{\n          type: 'consultation_request',\n          data: {\n            type: consultationType,\n            reason: 'Symptom consultation'\n          }\n        }],\n        conversationId: securityService.generateSecureToken()\n      };\n    }\n\n    // Detect medication questions\n    if (lowerInput.includes('medication') || lowerInput.includes('prescription') || lowerInput.includes('drug') || lowerInput.includes('pill')) {\n      return {\n        textResponse: \"I can help you with medication-related questions. For specific medication advice, I recommend speaking with our pharmacist. Would you like me to connect you with our telepharmacy service?\",\n        actions: [{\n          type: 'pharmacy_inquiry',\n          data: {\n            type: 'telepharmacy',\n            reason: 'Medication consultation'\n          }\n        }],\n        conversationId: securityService.generateSecureToken()\n      };\n    }\n\n    // Default response\n    return {\n      textResponse: `Thank you for reaching out to NextViseAI ${consultationType} services. I'm here to help you with your healthcare needs. How can I assist you today?`,\n      conversationId: securityService.generateSecureToken()\n    };\n  }\n\n  async saveConversationToDatabase(\n    patientId: string,\n    messages: ConversationMessage[],\n    consultationType: 'telehealth' | 'telepharmacy'\n  ): Promise<string> {\n    try {\n      // Create a consultation record\n      const consultation = await storage.createConsultation({\n        patientId,\n        consultationType,\n        status: 'in_progress',\n        reason: 'Voice agent consultation',\n        transcript: JSON.stringify(messages),\n        notes: 'Voice agent conversation'\n      });\n\n      // Create a medical record for the conversation\n      const transcript = messages.map(msg => \n        `[${msg.timestamp?.toLocaleString() || 'Unknown time'}] ${msg.role}: ${msg.content}`\n      ).join('\\n');\n\n      await storage.createMedicalRecord({\n        patientId,\n        recordType: 'consultation',\n        title: `Voice Agent ${consultationType} Consultation`,\n        content: transcript,\n        doctorName: 'NextViseAI Voice Agent',\n        facilityName: 'NextViseAI Platform'\n      });\n\n      return consultation.id;\n    } catch (error) {\n      console.error('Error saving conversation to database:', error);\n      throw new Error('Failed to save conversation');\n    }\n  }\n}\n\nexport const voiceAgentService = new VoiceAgentService();","size_bytes":11204},"client/src/components/AssessmentHistory.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  FileText, \n  Calendar, \n  AlertTriangle, \n  CheckCircle, \n  Clock,\n  TrendingUp,\n  Heart\n} from 'lucide-react';\n\ninterface AIHealthAnalysis {\n  diagnosis: string[];\n  recommendations: string[];\n  urgencyLevel: 'low' | 'medium' | 'high' | 'emergency';\n  referralNeeded: boolean;\n  riskScore: number;\n  followUpDays?: number;\n  emergencyWarning?: string;\n}\n\ninterface HealthAssessment {\n  id: string;\n  assessmentType: string;\n  symptoms: string[];\n  aiAnalysis: AIHealthAnalysis;\n  followUpRequired: boolean;\n  consultationRecommended: boolean;\n  createdAt: string;\n}\n\ninterface AssessmentHistoryProps {\n  assessments: HealthAssessment[];\n  onViewAssessment: (assessment: HealthAssessment) => void;\n}\n\nexport function AssessmentHistory({ assessments, onViewAssessment }: AssessmentHistoryProps) {\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency':\n        return 'destructive';\n      case 'high':\n        return 'destructive';\n      case 'medium':\n        return 'secondary';\n      case 'low':\n        return 'outline';\n      default:\n        return 'outline';\n    }\n  };\n\n  const getUrgencyIcon = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency':\n      case 'high':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'medium':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'low':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      default:\n        return <Heart className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getAssessmentTypeDisplay = (type: string) => {\n    switch (type) {\n      case 'symptom_check':\n        return 'Symptom Check';\n      case 'wellness_check':\n        return 'Wellness Check';\n      case 'risk_assessment':\n        return 'Risk Assessment';\n      default:\n        return type.charAt(0).toUpperCase() + type.slice(1);\n    }\n  };\n\n  if (assessments.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Assessment History\n          </CardTitle>\n          <CardDescription>\n            Your previous health assessments will appear here\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"text-center py-8\">\n          <FileText className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium mb-2\">No assessments yet</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Start your first health assessment to track your health over time\n          </p>\n          <Button \n            onClick={() => window.location.reload()} \n            data-testid=\"button-start-first-assessment\"\n          >\n            Start Assessment\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Assessment History\n          </CardTitle>\n          <CardDescription>\n            View and track your previous health assessments\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      <div className=\"space-y-4\">\n        {assessments.map((assessment) => (\n          <Card key={assessment.id} className=\"hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"space-y-1\">\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    {getAssessmentTypeDisplay(assessment.assessmentType)}\n                  </CardTitle>\n                  <CardDescription>\n                    {new Date(assessment.createdAt).toLocaleDateString('en-US', {\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })}\n                  </CardDescription>\n                </div>\n                <Badge \n                  variant={getUrgencyColor(assessment.aiAnalysis.urgencyLevel)} \n                  className=\"flex items-center gap-1\"\n                >\n                  {getUrgencyIcon(assessment.aiAnalysis.urgencyLevel)}\n                  {assessment.aiAnalysis.urgencyLevel.charAt(0).toUpperCase() + \n                   assessment.aiAnalysis.urgencyLevel.slice(1)}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Symptoms Summary */}\n              <div>\n                <h4 className=\"font-medium mb-2\">Symptoms ({assessment.symptoms.length})</h4>\n                <div className=\"flex flex-wrap gap-1\">\n                  {assessment.symptoms.slice(0, 4).map((symptom) => (\n                    <Badge key={symptom} variant=\"outline\" className=\"text-xs\">\n                      {symptom}\n                    </Badge>\n                  ))}\n                  {assessment.symptoms.length > 4 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{assessment.symptoms.length - 4} more\n                    </Badge>\n                  )}\n                </div>\n              </div>\n\n              {/* Key Metrics */}\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>Risk Score: {assessment.aiAnalysis.riskScore}/100</span>\n                </div>\n                \n                {assessment.aiAnalysis.followUpDays && (\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>Follow-up: {assessment.aiAnalysis.followUpDays} days</span>\n                  </div>\n                )}\n\n                {assessment.consultationRecommended && (\n                  <div className=\"flex items-center gap-2\">\n                    <Heart className=\"h-4 w-4 text-red-500\" />\n                    <span className=\"text-red-600\">Consultation Recommended</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Primary Diagnosis */}\n              {assessment.aiAnalysis.diagnosis.length > 0 && (\n                <div>\n                  <h4 className=\"font-medium mb-1\">Primary Assessment</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {assessment.aiAnalysis.diagnosis[0]}\n                    {assessment.aiAnalysis.diagnosis.length > 1 && \n                      ` (and ${assessment.aiAnalysis.diagnosis.length - 1} other${\n                        assessment.aiAnalysis.diagnosis.length > 2 ? 's' : ''\n                      })`\n                    }\n                  </p>\n                </div>\n              )}\n\n              {/* Emergency Warning */}\n              {assessment.aiAnalysis.emergencyWarning && (\n                <div className=\"bg-red-50 border border-red-200 rounded-md p-3\">\n                  <div className=\"flex items-start gap-2\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-600 mt-0.5 flex-shrink-0\" />\n                    <p className=\"text-sm text-red-800\">\n                      {assessment.aiAnalysis.emergencyWarning}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div className=\"flex gap-2 pt-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => onViewAssessment(assessment)}\n                  data-testid={`button-view-assessment-${assessment.id}`}\n                >\n                  View Details\n                </Button>\n                \n                {assessment.consultationRecommended && (\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    data-testid={`button-book-consultation-${assessment.id}`}\n                  >\n                    Book Consultation\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Summary Stats */}\n      {assessments.length > 1 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Health Summary</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n              <div>\n                <p className=\"text-2xl font-bold\">{assessments.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Total Assessments</p>\n              </div>\n              \n              <div>\n                <p className=\"text-2xl font-bold\">\n                  {Math.round(\n                    assessments.reduce((sum, a) => sum + a.aiAnalysis.riskScore, 0) / \n                    assessments.length\n                  )}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Avg Risk Score</p>\n              </div>\n\n              <div>\n                <p className=\"text-2xl font-bold\">\n                  {assessments.filter(a => a.consultationRecommended).length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Consultations Recommended</p>\n              </div>\n\n              <div>\n                <p className=\"text-2xl font-bold\">\n                  {assessments.filter(a => a.followUpRequired).length}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Follow-ups Required</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":10127},"client/src/components/SymptomChecker.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Slider } from '@/components/ui/slider';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  Thermometer, \n  Clock, \n  AlertTriangle, \n  CheckCircle,\n  Activity,\n  Brain\n} from 'lucide-react';\n\ninterface Questionnaire {\n  id: string;\n  title: string;\n  description: string;\n  questions: Array<{\n    id: string;\n    type: string;\n    question: string;\n    options?: string[];\n    required: boolean;\n  }>;\n}\n\ninterface SymptomCheckerProps {\n  questionnaires: Questionnaire[];\n  onSubmit: (data: any) => Promise<void>;\n  isLoading: boolean;\n}\n\nexport function SymptomChecker({ questionnaires, onSubmit, isLoading }: SymptomCheckerProps) {\n  const [selectedSymptoms, setSelectedSymptoms] = useState<string[]>([]);\n  const [symptomSeverity, setSymptomSeverity] = useState<Record<string, number>>({});\n  const [symptomDuration, setSymptomDuration] = useState<Record<string, string>>({});\n  const [currentStep, setCurrentStep] = useState<'symptoms' | 'details' | 'review'>('symptoms');\n  const [additionalInfo, setAdditionalInfo] = useState('');\n  const [temperature, setTemperature] = useState('');\n\n  const { register, handleSubmit, setValue, watch } = useForm();\n\n  // Get the symptom checker questionnaire\n  const symptomQuestionnaire = questionnaires.find(q => q.id === 'symptom_checker');\n  const symptomsQuestion = symptomQuestionnaire?.questions.find(q => q.id === 'primary_symptoms');\n\n  const commonSymptoms = symptomsQuestion?.options || [\n    'Headache', 'Fever', 'Cough', 'Sore throat', 'Fatigue',\n    'Nausea', 'Vomiting', 'Diarrhea', 'Abdominal pain',\n    'Chest pain', 'Difficulty breathing', 'Dizziness',\n    'Muscle aches', 'Joint pain', 'Skin rash'\n  ];\n\n  const emergencySymptoms = [\n    'Chest pain', 'Difficulty breathing', 'Severe bleeding', \n    'Loss of consciousness', 'Severe allergic reaction'\n  ];\n\n  const durationOptions = [\n    'Less than 24 hours',\n    '1-3 days',\n    '4-7 days', \n    '1-2 weeks',\n    'More than 2 weeks'\n  ];\n\n  const temperatureOptions = [\n    'No fever (under 100°F/37.8°C)',\n    'Low fever (100-101°F/37.8-38.3°C)',\n    'Moderate fever (101-103°F/38.3-39.4°C)',\n    'High fever (over 103°F/39.4°C)',\n    'Haven\\'t measured'\n  ];\n\n  const handleSymptomToggle = (symptom: string) => {\n    setSelectedSymptoms(prev => {\n      const isSelected = prev.includes(symptom);\n      if (isSelected) {\n        // Remove symptom and its associated data\n        const newSymptoms = prev.filter(s => s !== symptom);\n        setSymptomSeverity(prevSev => {\n          const newSev = { ...prevSev };\n          delete newSev[symptom];\n          return newSev;\n        });\n        setSymptomDuration(prevDur => {\n          const newDur = { ...prevDur };\n          delete newDur[symptom];\n          return newDur;\n        });\n        return newSymptoms;\n      } else {\n        return [...prev, symptom];\n      }\n    });\n  };\n\n  const handleSeverityChange = (symptom: string, severity: number[]) => {\n    setSymptomSeverity(prev => ({\n      ...prev,\n      [symptom]: severity[0]\n    }));\n  };\n\n  const handleDurationChange = (symptom: string, duration: string) => {\n    setSymptomDuration(prev => ({\n      ...prev,\n      [symptom]: duration\n    }));\n  };\n\n  const canProceedToDetails = selectedSymptoms.length > 0;\n  const canProceedToReview = selectedSymptoms.length > 0 && selectedSymptoms.every(symptom => \n    symptomSeverity[symptom] !== undefined && symptomDuration[symptom] !== undefined && symptomDuration[symptom] !== ''\n  );\n\n  const hasEmergencySymptoms = selectedSymptoms.some(symptom =>\n    emergencySymptoms.some(emergency => \n      symptom.toLowerCase().includes(emergency.toLowerCase())\n    )\n  );\n\n  const handleFinalSubmit = async () => {\n    try {\n      await onSubmit({\n        assessmentType: 'symptom_check',\n        symptoms: selectedSymptoms,\n        severity: symptomSeverity,\n        duration: symptomDuration,\n        additionalInfo,\n        responses: {\n          temperature,\n          additional_info: additionalInfo\n        }\n      });\n    } catch (error) {\n      console.error('Error submitting assessment:', error);\n    }\n  };\n\n  const renderStepIndicator = () => (\n    <div className=\"flex justify-center space-x-2 mb-6\">\n      {['symptoms', 'details', 'review'].map((step, index) => (\n        <div key={step} className=\"flex items-center\">\n          <div className={`\n            w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium\n            ${currentStep === step ? 'bg-primary text-primary-foreground' : \n              ['symptoms', 'details'].includes(step) && currentStep === 'review' ? 'bg-green-500 text-white' :\n              'bg-muted text-muted-foreground'}\n          `}>\n            {currentStep === step ? (index + 1) : \n             ['symptoms', 'details'].includes(step) && currentStep === 'review' ? '✓' : (index + 1)}\n          </div>\n          {index < 2 && (\n            <div className={`w-12 h-0.5 mx-2 ${\n              currentStep === 'review' || (currentStep === 'details' && step === 'symptoms') \n                ? 'bg-green-500' : 'bg-muted'\n            }`} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n\n  if (currentStep === 'symptoms') {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5\" />\n            Select Your Symptoms\n          </CardTitle>\n          <CardDescription>\n            Choose all symptoms you are currently experiencing\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {renderStepIndicator()}\n\n          {hasEmergencySymptoms && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                You have selected symptoms that may require immediate medical attention. \n                Please consider seeking emergency care if symptoms are severe.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n            {commonSymptoms.map((symptom) => (\n              <div key={symptom} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={symptom}\n                  checked={selectedSymptoms.includes(symptom)}\n                  onCheckedChange={() => handleSymptomToggle(symptom)}\n                  data-testid={`symptom-${symptom.toLowerCase().replace(/\\s+/g, '-')}`}\n                />\n                <Label \n                  htmlFor={symptom} \n                  className={`text-sm cursor-pointer ${\n                    emergencySymptoms.some(emergency => \n                      symptom.toLowerCase().includes(emergency.toLowerCase())\n                    ) ? 'text-red-600 font-medium' : ''\n                  }`}\n                >\n                  {symptom}\n                </Label>\n              </div>\n            ))}\n          </div>\n\n          {selectedSymptoms.length > 0 && (\n            <div className=\"space-y-2\">\n              <p className=\"font-medium\">Selected symptoms:</p>\n              <div className=\"flex flex-wrap gap-2\">\n                {selectedSymptoms.map((symptom) => (\n                  <Badge key={symptom} variant=\"secondary\">\n                    {symptom}\n                    <button\n                      onClick={() => handleSymptomToggle(symptom)}\n                      className=\"ml-2 hover:text-destructive\"\n                      data-testid={`remove-symptom-${symptom.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      ×\n                    </button>\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-end\">\n            <Button \n              onClick={() => setCurrentStep('details')}\n              disabled={!canProceedToDetails}\n              data-testid=\"button-proceed-to-details\"\n            >\n              Continue to Details\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (currentStep === 'details') {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5\" />\n            Symptom Details\n          </CardTitle>\n          <CardDescription>\n            Provide details about each symptom's severity and duration\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {renderStepIndicator()}\n\n          <div className=\"space-y-6\">\n            {selectedSymptoms.map((symptom) => (\n              <Card key={symptom} className=\"p-4\">\n                <h4 className=\"font-medium mb-4\">{symptom}</h4>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium mb-2 block\">\n                      Severity (1 = mild, 10 = severe): {symptomSeverity[symptom] || 5}\n                    </Label>\n                    <Slider\n                      value={[symptomSeverity[symptom] || 5]}\n                      onValueChange={(value) => handleSeverityChange(symptom, value)}\n                      max={10}\n                      min={1}\n                      step={1}\n                      className=\"w-full\"\n                      data-testid={`severity-slider-${symptom.toLowerCase().replace(/\\s+/g, '-')}`}\n                    />\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium mb-2 block\">Duration</Label>\n                    <RadioGroup\n                      value={symptomDuration[symptom] || ''}\n                      onValueChange={(value) => handleDurationChange(symptom, value)}\n                    >\n                      {durationOptions.map((duration) => (\n                        <div key={duration} className=\"flex items-center space-x-2\">\n                          <RadioGroupItem \n                            value={duration} \n                            id={`${symptom}-${duration}`}\n                            data-testid={`duration-${symptom.toLowerCase().replace(/\\s+/g, '-')}-${duration.toLowerCase().replace(/\\s+/g, '-')}`}\n                          />\n                          <Label htmlFor={`${symptom}-${duration}`} className=\"text-sm\">\n                            {duration}\n                          </Label>\n                        </div>\n                      ))}\n                    </RadioGroup>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n\n          <Separator />\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"text-sm font-medium mb-2 block flex items-center gap-2\">\n                <Thermometer className=\"h-4 w-4\" />\n                Temperature Status\n              </Label>\n              <RadioGroup value={temperature} onValueChange={setTemperature}>\n                {temperatureOptions.map((temp) => (\n                  <div key={temp} className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value={temp} id={temp} data-testid={`temperature-${temp.toLowerCase().replace(/\\s+/g, '-')}`} />\n                    <Label htmlFor={temp} className=\"text-sm\">{temp}</Label>\n                  </div>\n                ))}\n              </RadioGroup>\n            </div>\n\n            <div>\n              <Label htmlFor=\"additional-info\" className=\"text-sm font-medium mb-2 block\">\n                Additional Information (Optional)\n              </Label>\n              <Textarea\n                id=\"additional-info\"\n                placeholder=\"Describe any other symptoms, relevant medical history, or concerns...\"\n                value={additionalInfo}\n                onChange={(e) => setAdditionalInfo(e.target.value)}\n                rows={3}\n                data-testid=\"input-additional-info\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-between\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setCurrentStep('symptoms')}\n              data-testid=\"button-back-to-symptoms\"\n            >\n              Back\n            </Button>\n            <Button \n              onClick={() => setCurrentStep('review')}\n              disabled={!canProceedToReview}\n              data-testid=\"button-proceed-to-review\"\n            >\n              Review & Submit\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (currentStep === 'review') {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5\" />\n            Review Your Assessment\n          </CardTitle>\n          <CardDescription>\n            Please review your information before submitting for AI analysis\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {renderStepIndicator()}\n\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Symptoms ({selectedSymptoms.length})</h4>\n              <div className=\"space-y-2\">\n                {selectedSymptoms.map((symptom) => (\n                  <div key={symptom} className=\"flex justify-between items-center p-2 bg-muted rounded\">\n                    <span className=\"font-medium\">{symptom}</span>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Severity: {symptomSeverity[symptom]}/10 • Duration: {symptomDuration[symptom]}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {temperature && (\n              <div>\n                <h4 className=\"font-medium mb-2\">Temperature</h4>\n                <p className=\"text-sm text-muted-foreground\">{temperature}</p>\n              </div>\n            )}\n\n            {additionalInfo && (\n              <div>\n                <h4 className=\"font-medium mb-2\">Additional Information</h4>\n                <p className=\"text-sm text-muted-foreground\">{additionalInfo}</p>\n              </div>\n            )}\n          </div>\n\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              This assessment will be analyzed by AI to provide health insights. \n              Results are for informational purposes only and do not replace professional medical advice.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"flex justify-between\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setCurrentStep('details')}\n              data-testid=\"button-back-to-details\"\n            >\n              Back to Edit\n            </Button>\n            <Button \n              onClick={handleFinalSubmit}\n              disabled={isLoading}\n              data-testid=\"button-submit-assessment\"\n            >\n              {isLoading ? 'Analyzing...' : 'Submit for AI Analysis'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return null;\n}","size_bytes":15752},"client/src/pages/HealthAssessment.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Separator } from '@/components/ui/separator';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Brain, \n  Heart, \n  AlertTriangle, \n  CheckCircle, \n  Clock,\n  Stethoscope,\n  FileText,\n  TrendingUp\n} from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { SymptomChecker } from '@/components/SymptomChecker';\nimport { AssessmentHistory } from '@/components/AssessmentHistory';\n\ninterface AIHealthAnalysis {\n  diagnosis: string[];\n  recommendations: string[];\n  urgencyLevel: 'low' | 'medium' | 'high' | 'emergency';\n  referralNeeded: boolean;\n  riskScore: number;\n  followUpDays?: number;\n  emergencyWarning?: string;\n}\n\ninterface HealthAssessment {\n  id: string;\n  assessmentType: string;\n  symptoms: string[];\n  aiAnalysis: AIHealthAnalysis;\n  followUpRequired: boolean;\n  consultationRecommended: boolean;\n  createdAt: string;\n}\n\ninterface Questionnaire {\n  id: string;\n  title: string;\n  description: string;\n  questions: Array<{\n    id: string;\n    type: string;\n    question: string;\n    options?: string[];\n    required: boolean;\n  }>;\n}\n\nexport function HealthAssessment() {\n  const [activeTab, setActiveTab] = useState<'checker' | 'history'>('checker');\n  const [currentAssessment, setCurrentAssessment] = useState<HealthAssessment | null>(null);\n  const queryClient = useQueryClient();\n\n  // Fetch available questionnaires\n  const { data: questionnairesData } = useQuery({\n    queryKey: ['/api/health/questionnaires'],\n    enabled: true\n  });\n\n  // Emergency symptoms (handled client-side for demo)\n  const emergencySymptoms = [\n    'chest pain', 'difficulty breathing', 'severe bleeding',\n    'loss of consciousness', 'severe allergic reaction'\n  ];\n\n  // Fetch recent assessments for the current patient (demo patient for now)\n  const { data: assessmentsData } = useQuery({\n    queryKey: ['/api/health/assessments/demo-patient-id'],\n    enabled: activeTab === 'history'\n  });\n\n  const createAssessmentMutation = useMutation({\n    mutationFn: async (assessmentData: any) => {\n      const response = await apiRequest('POST', `/api/health/assessment`, {\n        ...assessmentData,\n        patientId: 'demo-patient-id' // Using demo patient ID\n      });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      setCurrentAssessment(data.assessment);\n      queryClient.invalidateQueries({ queryKey: ['/api/health/assessments/demo-patient-id'] });\n    }\n  });\n\n  const handleSymptomSubmission = async (symptomData: any) => {\n    try {\n      await createAssessmentMutation.mutateAsync(symptomData);\n    } catch (error) {\n      console.error('Error creating assessment:', error);\n    }\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency':\n        return 'destructive';\n      case 'high':\n        return 'destructive';\n      case 'medium':\n        return 'secondary';\n      case 'low':\n        return 'outline';\n      default:\n        return 'outline';\n    }\n  };\n\n  const getUrgencyIcon = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency':\n      case 'high':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'medium':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'low':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      default:\n        return <Heart className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (createAssessmentMutation.isPending) {\n    return (\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"text-center space-y-4\">\n          <Brain className=\"h-12 w-12 mx-auto animate-pulse text-primary\" />\n          <h2 className=\"text-2xl font-bold\">AI Health Assessment in Progress</h2>\n          <p className=\"text-muted-foreground\">Analyzing your symptoms and generating recommendations...</p>\n          <Progress value={65} className=\"w-full max-w-md mx-auto\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold flex items-center justify-center gap-2\">\n          <Brain className=\"h-8 w-8 text-primary\" />\n          AI Health Assessment\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Get AI-powered health insights and recommendations based on your symptoms\n        </p>\n      </div>\n\n      {/* Emergency Warning */}\n      <Alert>\n        <AlertTriangle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <strong>Emergency Symptoms:</strong> If you experience chest pain, difficulty breathing, \n          severe bleeding, or loss of consciousness, call emergency services immediately.\n        </AlertDescription>\n      </Alert>\n\n      {/* Navigation Tabs */}\n      <div className=\"flex gap-2 border-b\">\n        <Button\n          variant={activeTab === 'checker' ? 'default' : 'ghost'}\n          onClick={() => setActiveTab('checker')}\n          className=\"flex items-center gap-2\"\n          data-testid=\"tab-symptom-checker\"\n        >\n          <Stethoscope className=\"h-4 w-4\" />\n          Symptom Checker\n        </Button>\n        <Button\n          variant={activeTab === 'history' ? 'default' : 'ghost'}\n          onClick={() => setActiveTab('history')}\n          className=\"flex items-center gap-2\"\n          data-testid=\"tab-assessment-history\"\n        >\n          <FileText className=\"h-4 w-4\" />\n          Assessment History\n        </Button>\n      </div>\n\n      {/* Content */}\n      {activeTab === 'checker' && (\n        <>\n          {!currentAssessment ? (\n            <SymptomChecker\n              questionnaires={(questionnairesData as any)?.questionnaires || []}\n              onSubmit={handleSymptomSubmission}\n              isLoading={createAssessmentMutation.isPending}\n            />\n          ) : (\n            <AssessmentResults \n              assessment={currentAssessment}\n              onNewAssessment={() => setCurrentAssessment(null)}\n            />\n          )}\n        </>\n      )}\n\n      {activeTab === 'history' && (\n        <AssessmentHistory \n          assessments={(assessmentsData as any)?.assessments || []}\n          onViewAssessment={setCurrentAssessment}\n        />\n      )}\n    </div>\n  );\n}\n\ninterface AssessmentResultsProps {\n  assessment: HealthAssessment;\n  onNewAssessment: () => void;\n}\n\nfunction AssessmentResults({ assessment, onNewAssessment }: AssessmentResultsProps) {\n  const { aiAnalysis } = assessment;\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency':\n        return 'destructive';\n      case 'high':\n        return 'destructive';\n      case 'medium':\n        return 'secondary';\n      case 'low':\n        return 'outline';\n      default:\n        return 'outline';\n    }\n  };\n\n  const getUrgencyIcon = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency':\n      case 'high':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'medium':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'low':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      default:\n        return <Heart className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            Assessment Results\n          </CardTitle>\n          <CardDescription>\n            AI analysis based on your symptoms from {new Date(assessment.createdAt).toLocaleDateString()}\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      {/* Emergency Warning */}\n      {aiAnalysis.emergencyWarning && (\n        <Alert variant=\"destructive\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <strong>Important:</strong> {aiAnalysis.emergencyWarning}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Urgency & Risk Score */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Health Status Overview</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"font-medium\">Urgency Level:</span>\n            <Badge variant={getUrgencyColor(aiAnalysis.urgencyLevel)} className=\"flex items-center gap-1\">\n              {getUrgencyIcon(aiAnalysis.urgencyLevel)}\n              {aiAnalysis.urgencyLevel.charAt(0).toUpperCase() + aiAnalysis.urgencyLevel.slice(1)}\n            </Badge>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">Risk Score:</span>\n              <span className=\"font-bold\">{aiAnalysis.riskScore}/100</span>\n            </div>\n            <Progress value={aiAnalysis.riskScore} className=\"w-full\" />\n          </div>\n\n          {aiAnalysis.followUpDays && (\n            <div className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">Recommended Follow-up:</span>\n              <span>{aiAnalysis.followUpDays} days</span>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Possible Diagnoses */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Possible Conditions</CardTitle>\n          <CardDescription>\n            These are preliminary assessments. Consult a healthcare provider for proper diagnosis.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"space-y-2\">\n            {aiAnalysis.diagnosis.map((diagnosis, index) => (\n              <li key={index} className=\"flex items-start gap-2\">\n                <div className=\"w-2 h-2 rounded-full bg-primary mt-2 flex-shrink-0\" />\n                <span>{diagnosis}</span>\n              </li>\n            ))}\n          </ul>\n        </CardContent>\n      </Card>\n\n      {/* Recommendations */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recommendations</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"space-y-3\">\n            {aiAnalysis.recommendations.map((recommendation, index) => (\n              <li key={index} className=\"flex items-start gap-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                <span>{recommendation}</span>\n              </li>\n            ))}\n          </ul>\n        </CardContent>\n      </Card>\n\n      {/* Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Next Steps</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {assessment.consultationRecommended && (\n            <Alert>\n              <Heart className=\"h-4 w-4\" />\n              <AlertDescription>\n                A healthcare consultation is recommended based on your symptoms.\n              </AlertDescription>\n            </Alert>\n          )}\n          \n          <div className=\"flex flex-wrap gap-2\">\n            <Button onClick={onNewAssessment} data-testid=\"button-new-assessment\">\n              Start New Assessment\n            </Button>\n            {assessment.consultationRecommended && (\n              <Button variant=\"outline\" data-testid=\"button-book-consultation\">\n                Book Consultation\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Disclaimer */}\n      <Alert>\n        <AlertTriangle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <strong>Medical Disclaimer:</strong> This AI assessment is for informational purposes only \n          and should not replace professional medical advice, diagnosis, or treatment. Always consult \n          with a qualified healthcare provider for medical concerns.\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n}","size_bytes":12215},"server/services/healthAssessmentService.ts":{"content":"import OpenAI from 'openai';\n\ninterface SymptomAnalysisConfig {\n  patientAge?: number;\n  patientGender?: string;\n  medicalHistory?: string[];\n  currentMedications?: string[];\n  allergies?: string[];\n}\n\ninterface HealthAssessmentRequest {\n  symptoms: string[];\n  severity: Record<string, number>; // 1-10 scale\n  duration: Record<string, string>; // e.g., \"2 days\", \"1 week\"\n  additionalInfo: string;\n  patientConfig?: SymptomAnalysisConfig;\n}\n\ninterface AIHealthAnalysis {\n  diagnosis: string[];\n  recommendations: string[];\n  urgencyLevel: 'low' | 'medium' | 'high' | 'emergency';\n  referralNeeded: boolean;\n  riskScore: number; // 0-100\n  followUpDays?: number;\n  emergencyWarning?: string;\n}\n\ninterface HealthQuestionnaire {\n  id: string;\n  title: string;\n  description: string;\n  questions: Array<{\n    id: string;\n    type: 'multiple_choice' | 'scale' | 'text' | 'boolean';\n    question: string;\n    options?: string[];\n    required: boolean;\n  }>;\n}\n\nclass HealthAssessmentService {\n  private openai: OpenAI;\n\n  constructor() {\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (!apiKey) {\n      console.warn(\"⚠️  No OpenAI API key found. Health assessment will use demo mode.\");\n    }\n    \n    this.openai = new OpenAI({\n      apiKey: apiKey || 'demo-key'\n    });\n  }\n\n  async analyzeSymptoms(request: HealthAssessmentRequest): Promise<AIHealthAnalysis> {\n    try {\n      if (!process.env.OPENAI_API_KEY) {\n        // Demo mode response\n        if (process.env.NODE_ENV !== 'production') {\n          console.log(\"HEALTH DEMO: Would analyze symptoms:\", request.symptoms.join(', '));\n        }\n        return this.generateDemoAnalysis(request);\n      }\n\n      const prompt = this.buildHealthAssessmentPrompt(request);\n\n      const completion = await this.openai.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [\n          {\n            role: 'system',\n            content: `You are a medical AI assistant helping with preliminary health assessment. \n            \nIMPORTANT DISCLAIMERS:\n- This is NOT a medical diagnosis and should not replace professional medical advice\n- Always recommend consulting with healthcare professionals for proper diagnosis\n- In case of emergency symptoms, always recommend immediate medical attention\n\nYour role is to:\n1. Analyze reported symptoms and provide possible explanations\n2. Assess urgency level and risk factors\n3. Provide general health recommendations\n4. Determine if professional medical consultation is needed\n\nRespond in JSON format with the following structure:\n{\n  \"diagnosis\": [\"possible condition 1\", \"possible condition 2\"],\n  \"recommendations\": [\"recommendation 1\", \"recommendation 2\"],\n  \"urgencyLevel\": \"low|medium|high|emergency\",\n  \"referralNeeded\": true|false,\n  \"riskScore\": 0-100,\n  \"followUpDays\": number,\n  \"emergencyWarning\": \"string if emergency\"\n}`\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 800,\n        temperature: 0.3\n      });\n\n      const responseText = completion.choices[0].message.content;\n      if (!responseText) {\n        throw new Error('No response from AI');\n      }\n\n      // Parse JSON response\n      const analysis: AIHealthAnalysis = JSON.parse(responseText);\n      \n      // Validate and sanitize response\n      return this.validateAnalysis(analysis);\n\n    } catch (error) {\n      console.error('Error analyzing symptoms:', error);\n      \n      // Fallback to demo mode\n      if (process.env.NODE_ENV !== 'production') {\n        console.log(\"HEALTH DEMO (fallback): AI analysis failed, using demo response\");\n      }\n      return this.generateDemoAnalysis(request);\n    }\n  }\n\n  private buildHealthAssessmentPrompt(request: HealthAssessmentRequest): string {\n    const { symptoms, severity, duration, additionalInfo, patientConfig } = request;\n\n    let prompt = `Health Assessment Request:\n\nSymptoms reported:\n${symptoms.map((symptom, index) => {\n  const sev = severity[symptom] ? ` (severity: ${severity[symptom]}/10)` : '';\n  const dur = duration[symptom] ? ` (duration: ${duration[symptom]})` : '';\n  return `- ${symptom}${sev}${dur}`;\n}).join('\\n')}\n\nAdditional information: ${additionalInfo || 'None provided'}\n`;\n\n    if (patientConfig) {\n      prompt += `\nPatient context:\n- Age: ${patientConfig.patientAge || 'Not specified'}\n- Gender: ${patientConfig.patientGender || 'Not specified'}\n- Medical history: ${patientConfig.medicalHistory?.join(', ') || 'None reported'}\n- Current medications: ${patientConfig.currentMedications?.join(', ') || 'None reported'}\n- Known allergies: ${patientConfig.allergies?.join(', ') || 'None reported'}\n`;\n    }\n\n    prompt += `\nPlease provide a comprehensive health assessment including possible explanations for these symptoms, urgency level, and recommendations. Remember this is for preliminary assessment only and not a substitute for professional medical care.`;\n\n    return prompt;\n  }\n\n  private generateDemoAnalysis(request: HealthAssessmentRequest): AIHealthAnalysis {\n    const { symptoms } = request;\n    \n    // Generate realistic demo analysis based on symptoms\n    const hasSeveSymptoms = symptoms.some(s => \n      s.toLowerCase().includes('chest pain') || \n      s.toLowerCase().includes('difficulty breathing') ||\n      s.toLowerCase().includes('severe')\n    );\n\n    const hasCommonSymptoms = symptoms.some(s =>\n      s.toLowerCase().includes('headache') ||\n      s.toLowerCase().includes('fatigue') ||\n      s.toLowerCase().includes('cough')\n    );\n\n    if (hasSeveSymptoms) {\n      return {\n        diagnosis: ['Requires immediate medical evaluation', 'Possible cardiac or respiratory concern'],\n        recommendations: [\n          'Seek immediate medical attention',\n          'Do not delay in consulting a healthcare provider',\n          'Monitor symptoms closely'\n        ],\n        urgencyLevel: 'high',\n        referralNeeded: true,\n        riskScore: 75,\n        followUpDays: 1,\n        emergencyWarning: 'These symptoms may require immediate medical attention'\n      };\n    }\n\n    if (hasCommonSymptoms) {\n      return {\n        diagnosis: ['Possible viral infection', 'Common cold or flu', 'Stress-related symptoms'],\n        recommendations: [\n          'Get adequate rest and hydration',\n          'Monitor symptoms for changes',\n          'Consider over-the-counter symptom relief',\n          'Consult healthcare provider if symptoms worsen'\n        ],\n        urgencyLevel: 'low',\n        referralNeeded: false,\n        riskScore: 25,\n        followUpDays: 7\n      };\n    }\n\n    return {\n      diagnosis: ['General health concern', 'Requires further evaluation'],\n      recommendations: [\n        'Schedule consultation with healthcare provider',\n        'Keep a symptom diary',\n        'Monitor for any changes or new symptoms',\n        'Maintain healthy lifestyle habits'\n      ],\n      urgencyLevel: 'medium',\n      referralNeeded: true,\n      riskScore: 40,\n      followUpDays: 3\n    };\n  }\n\n  private validateAnalysis(analysis: AIHealthAnalysis): AIHealthAnalysis {\n    return {\n      diagnosis: Array.isArray(analysis.diagnosis) ? analysis.diagnosis : ['Requires medical evaluation'],\n      recommendations: Array.isArray(analysis.recommendations) ? analysis.recommendations : ['Consult healthcare provider'],\n      urgencyLevel: ['low', 'medium', 'high', 'emergency'].includes(analysis.urgencyLevel) \n        ? analysis.urgencyLevel : 'medium',\n      referralNeeded: typeof analysis.referralNeeded === 'boolean' ? analysis.referralNeeded : true,\n      riskScore: typeof analysis.riskScore === 'number' && analysis.riskScore >= 0 && analysis.riskScore <= 100 \n        ? analysis.riskScore : 50,\n      followUpDays: analysis.followUpDays,\n      emergencyWarning: analysis.emergencyWarning\n    };\n  }\n\n  getHealthQuestionnaires(): HealthQuestionnaire[] {\n    return [\n      {\n        id: 'symptom_checker',\n        title: 'Symptom Checker',\n        description: 'Answer questions about your current symptoms for AI-powered health assessment',\n        questions: [\n          {\n            id: 'primary_symptoms',\n            type: 'multiple_choice',\n            question: 'What are your primary symptoms? (Select all that apply)',\n            options: [\n              'Headache', 'Fever', 'Cough', 'Sore throat', 'Fatigue',\n              'Nausea', 'Vomiting', 'Diarrhea', 'Abdominal pain',\n              'Chest pain', 'Difficulty breathing', 'Dizziness',\n              'Muscle aches', 'Joint pain', 'Skin rash', 'Other'\n            ],\n            required: true\n          },\n          {\n            id: 'symptom_onset',\n            type: 'multiple_choice',\n            question: 'When did your symptoms start?',\n            options: [\n              'Less than 24 hours ago',\n              '1-3 days ago',\n              '4-7 days ago',\n              '1-2 weeks ago',\n              'More than 2 weeks ago'\n            ],\n            required: true\n          },\n          {\n            id: 'symptom_severity',\n            type: 'scale',\n            question: 'Rate the overall severity of your symptoms (1 = mild, 10 = severe)',\n            required: true\n          },\n          {\n            id: 'temperature',\n            type: 'multiple_choice',\n            question: 'Have you measured your temperature?',\n            options: [\n              'No fever (under 100°F/37.8°C)',\n              'Low fever (100-101°F/37.8-38.3°C)',\n              'Moderate fever (101-103°F/38.3-39.4°C)',\n              'High fever (over 103°F/39.4°C)',\n              'Haven\\'t measured'\n            ],\n            required: false\n          },\n          {\n            id: 'additional_symptoms',\n            type: 'text',\n            question: 'Please describe any additional symptoms or details',\n            required: false\n          },\n          {\n            id: 'medical_history',\n            type: 'boolean',\n            question: 'Do you have any chronic medical conditions?',\n            required: false\n          },\n          {\n            id: 'current_medications',\n            type: 'boolean',\n            question: 'Are you currently taking any medications?',\n            required: false\n          }\n        ]\n      },\n      {\n        id: 'wellness_check',\n        title: 'General Wellness Assessment',\n        description: 'Comprehensive wellness evaluation for preventive health',\n        questions: [\n          {\n            id: 'energy_level',\n            type: 'scale',\n            question: 'Rate your overall energy level (1 = very low, 10 = very high)',\n            required: true\n          },\n          {\n            id: 'sleep_quality',\n            type: 'scale',\n            question: 'Rate your sleep quality (1 = very poor, 10 = excellent)',\n            required: true\n          },\n          {\n            id: 'stress_level',\n            type: 'scale',\n            question: 'Rate your stress level (1 = very low, 10 = very high)',\n            required: true\n          },\n          {\n            id: 'exercise_frequency',\n            type: 'multiple_choice',\n            question: 'How often do you exercise?',\n            options: [\n              'Daily',\n              '3-5 times per week',\n              '1-2 times per week',\n              'Rarely',\n              'Never'\n            ],\n            required: true\n          },\n          {\n            id: 'diet_quality',\n            type: 'multiple_choice',\n            question: 'How would you describe your diet?',\n            options: [\n              'Very healthy',\n              'Mostly healthy',\n              'Average',\n              'Somewhat unhealthy',\n              'Very unhealthy'\n            ],\n            required: true\n          }\n        ]\n      }\n    ];\n  }\n\n  getEmergencySymptoms(): string[] {\n    return [\n      'chest pain',\n      'difficulty breathing',\n      'severe abdominal pain',\n      'loss of consciousness',\n      'severe headache',\n      'confusion',\n      'high fever with rash',\n      'severe allergic reaction',\n      'signs of stroke',\n      'severe bleeding',\n      'thoughts of self-harm'\n    ];\n  }\n}\n\nexport const healthAssessmentService = new HealthAssessmentService();\nexport type { HealthAssessmentRequest, AIHealthAnalysis, HealthQuestionnaire };","size_bytes":12231}},"version":1}